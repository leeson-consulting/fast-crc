#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// These CRC Table-Kernel macros have been generated by "./tools/make_crc_kernels"
//
// The functions expanded by the macros use the following naming conventions:
//
// 'f#'     ==> 'Forward  CRC-# Polynomial', eg. f12 is 'Forward CRC-12 Polynomial'
// 'r#'     ==> 'Reversed CRC-# Polynomial', eg. r24 is 'Reversed CRC-24 Polynomial'
// 't4'     ==> '4-bit Lookup Table', ie. data processed nibble at a time
// 't8'     ==> '8-bit Lookup table', ie. data processed byte at a time
//
///////////////////////////////////////////////////////////////////////////////

#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
//
// CRC-3 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f3_t4(poly) \
static inline uint_fast8_t crc3_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc3_##poly##_tbl[((crc << (4 - 3)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc3_##poly##_tbl[((crc << (4 - 3)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc3_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_byte_##poly##_impl(crc, data_byte) & 0x7; \
} \
\
static uint_fast8_t crc3_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc3_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7; \
} \

#define make_crc_kernel_r3_t4(poly) \
static inline uint_fast8_t crc3_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc3_##poly##_tbl[(crc ^ data_byte) & 0x0f]; \
  crc = crc3_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f]; \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc3_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_byte_##poly##_impl(crc, data_byte) & 0x7; \
} \
\
static uint_fast8_t crc3_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc3_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7; \
} \

#define make_crc_kernel_f3_t8(poly) \
static inline uint_fast8_t crc3_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_##poly##_tbl[((crc << (8 - 3)) ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc3_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_byte_##poly##_impl(crc, data_byte) & 0x7; \
} \
\
static uint_fast8_t crc3_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc3_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7; \
} \

#define make_crc_kernel_r3_t8(poly) \
static inline uint_fast8_t crc3_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc3_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc3_byte_##poly##_impl(crc, data_byte) & 0x7; \
} \
\
static uint_fast8_t crc3_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc3_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-4 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f4_t4(poly) \
static inline uint_fast8_t crc4_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc4_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f]; \
  crc = crc4_##poly##_tbl[(crc ^ data_byte) & 0x0f]; \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc4_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_byte_##poly##_impl(crc, data_byte) & 0xf; \
} \
\
static uint_fast8_t crc4_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc4_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xf; \
} \

#define make_crc_kernel_r4_t4(poly) \
static inline uint_fast8_t crc4_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc4_##poly##_tbl[(crc ^ data_byte) & 0x0f]; \
  crc = crc4_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f]; \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc4_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_byte_##poly##_impl(crc, data_byte) & 0xf; \
} \
\
static uint_fast8_t crc4_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc4_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xf; \
} \

#define make_crc_kernel_f4_t8(poly) \
static inline uint_fast8_t crc4_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_##poly##_tbl[((crc << (8 - 4)) ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc4_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_byte_##poly##_impl(crc, data_byte) & 0xf; \
} \
\
static uint_fast8_t crc4_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc4_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xf; \
} \

#define make_crc_kernel_r4_t8(poly) \
static inline uint_fast8_t crc4_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc4_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc4_byte_##poly##_impl(crc, data_byte) & 0xf; \
} \
\
static uint_fast8_t crc4_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc4_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xf; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-5 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f5_t4(poly) \
static inline uint_fast8_t crc5_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc5_##poly##_tbl[((crc >> (5 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc5_##poly##_tbl[((crc >> (5 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc5_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_byte_##poly##_impl(crc, data_byte) & 0x1f; \
} \
\
static uint_fast8_t crc5_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc5_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1f; \
} \

#define make_crc_kernel_r5_t4(poly) \
static inline uint_fast8_t crc5_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc5_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc5_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc5_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_byte_##poly##_impl(crc, data_byte) & 0x1f; \
} \
\
static uint_fast8_t crc5_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc5_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1f; \
} \

#define make_crc_kernel_f5_t8(poly) \
static inline uint_fast8_t crc5_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_##poly##_tbl[((crc << (8 - 5)) ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc5_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_byte_##poly##_impl(crc, data_byte) & 0x1f; \
} \
\
static uint_fast8_t crc5_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc5_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1f; \
} \

#define make_crc_kernel_r5_t8(poly) \
static inline uint_fast8_t crc5_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc5_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc5_byte_##poly##_impl(crc, data_byte) & 0x1f; \
} \
\
static uint_fast8_t crc5_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc5_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1f; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-6 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f6_t4(poly) \
static inline uint_fast8_t crc6_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc6_##poly##_tbl[((crc >> (6 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc6_##poly##_tbl[((crc >> (6 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc6_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_byte_##poly##_impl(crc, data_byte) & 0x3f; \
} \
\
static uint_fast8_t crc6_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc6_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3f; \
} \

#define make_crc_kernel_r6_t4(poly) \
static inline uint_fast8_t crc6_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc6_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc6_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc6_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_byte_##poly##_impl(crc, data_byte) & 0x3f; \
} \
\
static uint_fast8_t crc6_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc6_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3f; \
} \

#define make_crc_kernel_f6_t8(poly) \
static inline uint_fast8_t crc6_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_##poly##_tbl[((crc << (8 - 6)) ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc6_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_byte_##poly##_impl(crc, data_byte) & 0x3f; \
} \
\
static uint_fast8_t crc6_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc6_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3f; \
} \

#define make_crc_kernel_r6_t8(poly) \
static inline uint_fast8_t crc6_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc6_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc6_byte_##poly##_impl(crc, data_byte) & 0x3f; \
} \
\
static uint_fast8_t crc6_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc6_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3f; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-7 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f7_t4(poly) \
static inline uint_fast8_t crc7_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc7_##poly##_tbl[((crc >> (7 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc7_##poly##_tbl[((crc >> (7 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc7_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_byte_##poly##_impl(crc, data_byte) & 0x7f; \
} \
\
static uint_fast8_t crc7_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc7_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7f; \
} \

#define make_crc_kernel_r7_t4(poly) \
static inline uint_fast8_t crc7_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc7_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc7_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc7_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_byte_##poly##_impl(crc, data_byte) & 0x7f; \
} \
\
static uint_fast8_t crc7_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc7_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7f; \
} \

#define make_crc_kernel_f7_t8(poly) \
static inline uint_fast8_t crc7_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_##poly##_tbl[((crc << (8 - 7)) ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc7_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_byte_##poly##_impl(crc, data_byte) & 0x7f; \
} \
\
static uint_fast8_t crc7_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc7_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7f; \
} \

#define make_crc_kernel_r7_t8(poly) \
static inline uint_fast8_t crc7_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc7_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc7_byte_##poly##_impl(crc, data_byte) & 0x7f; \
} \
\
static uint_fast8_t crc7_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc7_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7f; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-8 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f8_t4(poly) \
static inline uint_fast8_t crc8_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc8_##poly##_tbl[((crc >> (8 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc8_##poly##_tbl[((crc >> (8 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc8_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_byte_##poly##_impl(crc, data_byte) & 0xff; \
} \
\
static uint_fast8_t crc8_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc8_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xff; \
} \

#define make_crc_kernel_r8_t4(poly) \
static inline uint_fast8_t crc8_byte_##poly##_impl(uint_fast8_t crc, uint8_t const data_byte) \
{ \
  crc = crc8_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc8_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast8_t crc8_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_byte_##poly##_impl(crc, data_byte) & 0xff; \
} \
\
static uint_fast8_t crc8_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc8_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xff; \
} \

#define make_crc_kernel_f8_t8(poly) \
static inline uint_fast8_t crc8_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc8_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_byte_##poly##_impl(crc, data_byte) & 0xff; \
} \
\
static uint_fast8_t crc8_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc8_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xff; \
} \

#define make_crc_kernel_r8_t8(poly) \
static inline uint_fast8_t crc8_byte_##poly##_impl(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_##poly##_tbl[(crc ^ data_byte) & 0xff]; \
} \
\
static inline uint_fast8_t crc8_byte_##poly(uint_fast8_t const crc, uint8_t const data_byte) \
{ \
  return crc8_byte_##poly##_impl(crc, data_byte) & 0xff; \
} \
\
static uint_fast8_t crc8_##poly(uint_fast8_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast8_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc8_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-9 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f9_t4(poly) \
static inline uint_fast16_t crc9_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc9_##poly##_tbl[((crc >> (9 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc9_##poly##_tbl[((crc >> (9 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc9_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_byte_##poly##_impl(crc, data_byte) & 0x1ff; \
} \
\
static uint_fast16_t crc9_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc9_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ff; \
} \

#define make_crc_kernel_r9_t4(poly) \
static inline uint_fast16_t crc9_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc9_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc9_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc9_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_byte_##poly##_impl(crc, data_byte) & 0x1ff; \
} \
\
static uint_fast16_t crc9_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc9_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ff; \
} \

#define make_crc_kernel_f9_t8(poly) \
static inline uint_fast16_t crc9_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_##poly##_tbl[((crc >> (9 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc9_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_byte_##poly##_impl(crc, data_byte) & 0x1ff; \
} \
\
static uint_fast16_t crc9_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc9_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ff; \
} \

#define make_crc_kernel_r9_t8(poly) \
static inline uint_fast16_t crc9_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc9_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc9_byte_##poly##_impl(crc, data_byte) & 0x1ff; \
} \
\
static uint_fast16_t crc9_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc9_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-10 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f10_t4(poly) \
static inline uint_fast16_t crc10_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc10_##poly##_tbl[((crc >> (10 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc10_##poly##_tbl[((crc >> (10 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc10_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_byte_##poly##_impl(crc, data_byte) & 0x3ff; \
} \
\
static uint_fast16_t crc10_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc10_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ff; \
} \

#define make_crc_kernel_r10_t4(poly) \
static inline uint_fast16_t crc10_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc10_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc10_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc10_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_byte_##poly##_impl(crc, data_byte) & 0x3ff; \
} \
\
static uint_fast16_t crc10_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc10_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ff; \
} \

#define make_crc_kernel_f10_t8(poly) \
static inline uint_fast16_t crc10_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_##poly##_tbl[((crc >> (10 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc10_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_byte_##poly##_impl(crc, data_byte) & 0x3ff; \
} \
\
static uint_fast16_t crc10_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc10_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ff; \
} \

#define make_crc_kernel_r10_t8(poly) \
static inline uint_fast16_t crc10_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc10_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc10_byte_##poly##_impl(crc, data_byte) & 0x3ff; \
} \
\
static uint_fast16_t crc10_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc10_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-11 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f11_t4(poly) \
static inline uint_fast16_t crc11_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc11_##poly##_tbl[((crc >> (11 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc11_##poly##_tbl[((crc >> (11 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc11_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_byte_##poly##_impl(crc, data_byte) & 0x7ff; \
} \
\
static uint_fast16_t crc11_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc11_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ff; \
} \

#define make_crc_kernel_r11_t4(poly) \
static inline uint_fast16_t crc11_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc11_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc11_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc11_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_byte_##poly##_impl(crc, data_byte) & 0x7ff; \
} \
\
static uint_fast16_t crc11_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc11_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ff; \
} \

#define make_crc_kernel_f11_t8(poly) \
static inline uint_fast16_t crc11_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_##poly##_tbl[((crc >> (11 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc11_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_byte_##poly##_impl(crc, data_byte) & 0x7ff; \
} \
\
static uint_fast16_t crc11_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc11_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ff; \
} \

#define make_crc_kernel_r11_t8(poly) \
static inline uint_fast16_t crc11_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc11_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc11_byte_##poly##_impl(crc, data_byte) & 0x7ff; \
} \
\
static uint_fast16_t crc11_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc11_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-12 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f12_t4(poly) \
static inline uint_fast16_t crc12_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc12_##poly##_tbl[((crc >> (12 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc12_##poly##_tbl[((crc >> (12 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc12_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_byte_##poly##_impl(crc, data_byte) & 0xfff; \
} \
\
static uint_fast16_t crc12_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc12_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfff; \
} \

#define make_crc_kernel_r12_t4(poly) \
static inline uint_fast16_t crc12_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc12_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc12_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc12_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_byte_##poly##_impl(crc, data_byte) & 0xfff; \
} \
\
static uint_fast16_t crc12_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc12_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfff; \
} \

#define make_crc_kernel_f12_t8(poly) \
static inline uint_fast16_t crc12_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_##poly##_tbl[((crc >> (12 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc12_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_byte_##poly##_impl(crc, data_byte) & 0xfff; \
} \
\
static uint_fast16_t crc12_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc12_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfff; \
} \

#define make_crc_kernel_r12_t8(poly) \
static inline uint_fast16_t crc12_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc12_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc12_byte_##poly##_impl(crc, data_byte) & 0xfff; \
} \
\
static uint_fast16_t crc12_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc12_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-13 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f13_t4(poly) \
static inline uint_fast16_t crc13_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc13_##poly##_tbl[((crc >> (13 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc13_##poly##_tbl[((crc >> (13 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc13_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_byte_##poly##_impl(crc, data_byte) & 0x1fff; \
} \
\
static uint_fast16_t crc13_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc13_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fff; \
} \

#define make_crc_kernel_r13_t4(poly) \
static inline uint_fast16_t crc13_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc13_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc13_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc13_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_byte_##poly##_impl(crc, data_byte) & 0x1fff; \
} \
\
static uint_fast16_t crc13_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc13_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fff; \
} \

#define make_crc_kernel_f13_t8(poly) \
static inline uint_fast16_t crc13_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_##poly##_tbl[((crc >> (13 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc13_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_byte_##poly##_impl(crc, data_byte) & 0x1fff; \
} \
\
static uint_fast16_t crc13_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc13_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fff; \
} \

#define make_crc_kernel_r13_t8(poly) \
static inline uint_fast16_t crc13_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc13_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc13_byte_##poly##_impl(crc, data_byte) & 0x1fff; \
} \
\
static uint_fast16_t crc13_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc13_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-14 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f14_t4(poly) \
static inline uint_fast16_t crc14_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc14_##poly##_tbl[((crc >> (14 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc14_##poly##_tbl[((crc >> (14 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc14_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_byte_##poly##_impl(crc, data_byte) & 0x3fff; \
} \
\
static uint_fast16_t crc14_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc14_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fff; \
} \

#define make_crc_kernel_r14_t4(poly) \
static inline uint_fast16_t crc14_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc14_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc14_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc14_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_byte_##poly##_impl(crc, data_byte) & 0x3fff; \
} \
\
static uint_fast16_t crc14_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc14_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fff; \
} \

#define make_crc_kernel_f14_t8(poly) \
static inline uint_fast16_t crc14_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_##poly##_tbl[((crc >> (14 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc14_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_byte_##poly##_impl(crc, data_byte) & 0x3fff; \
} \
\
static uint_fast16_t crc14_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc14_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fff; \
} \

#define make_crc_kernel_r14_t8(poly) \
static inline uint_fast16_t crc14_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc14_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc14_byte_##poly##_impl(crc, data_byte) & 0x3fff; \
} \
\
static uint_fast16_t crc14_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc14_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-15 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f15_t4(poly) \
static inline uint_fast16_t crc15_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc15_##poly##_tbl[((crc >> (15 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc15_##poly##_tbl[((crc >> (15 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc15_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_byte_##poly##_impl(crc, data_byte) & 0x7fff; \
} \
\
static uint_fast16_t crc15_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc15_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fff; \
} \

#define make_crc_kernel_r15_t4(poly) \
static inline uint_fast16_t crc15_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc15_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc15_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc15_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_byte_##poly##_impl(crc, data_byte) & 0x7fff; \
} \
\
static uint_fast16_t crc15_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc15_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fff; \
} \

#define make_crc_kernel_f15_t8(poly) \
static inline uint_fast16_t crc15_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_##poly##_tbl[((crc >> (15 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc15_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_byte_##poly##_impl(crc, data_byte) & 0x7fff; \
} \
\
static uint_fast16_t crc15_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc15_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fff; \
} \

#define make_crc_kernel_r15_t8(poly) \
static inline uint_fast16_t crc15_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc15_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc15_byte_##poly##_impl(crc, data_byte) & 0x7fff; \
} \
\
static uint_fast16_t crc15_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc15_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-16 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f16_t4(poly) \
static inline uint_fast16_t crc16_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc16_##poly##_tbl[((crc >> (16 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc16_##poly##_tbl[((crc >> (16 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc16_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_byte_##poly##_impl(crc, data_byte) & 0xffff; \
} \
\
static uint_fast16_t crc16_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc16_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffff; \
} \

#define make_crc_kernel_r16_t4(poly) \
static inline uint_fast16_t crc16_byte_##poly##_impl(uint_fast16_t crc, uint8_t const data_byte) \
{ \
  crc = crc16_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc16_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast16_t crc16_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_byte_##poly##_impl(crc, data_byte) & 0xffff; \
} \
\
static uint_fast16_t crc16_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc16_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffff; \
} \

#define make_crc_kernel_f16_t8(poly) \
static inline uint_fast16_t crc16_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_##poly##_tbl[((crc >> (16 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast16_t crc16_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_byte_##poly##_impl(crc, data_byte) & 0xffff; \
} \
\
static uint_fast16_t crc16_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc16_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffff; \
} \

#define make_crc_kernel_r16_t8(poly) \
static inline uint_fast16_t crc16_byte_##poly##_impl(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast16_t crc16_byte_##poly(uint_fast16_t const crc, uint8_t const data_byte) \
{ \
  return crc16_byte_##poly##_impl(crc, data_byte) & 0xffff; \
} \
\
static uint_fast16_t crc16_##poly(uint_fast16_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast16_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc16_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-17 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f17_t4(poly) \
static inline uint_fast32_t crc17_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc17_##poly##_tbl[((crc >> (17 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc17_##poly##_tbl[((crc >> (17 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc17_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_byte_##poly##_impl(crc, data_byte) & 0x1ffff; \
} \
\
static uint_fast32_t crc17_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc17_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffff; \
} \

#define make_crc_kernel_r17_t4(poly) \
static inline uint_fast32_t crc17_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc17_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc17_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc17_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_byte_##poly##_impl(crc, data_byte) & 0x1ffff; \
} \
\
static uint_fast32_t crc17_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc17_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffff; \
} \

#define make_crc_kernel_f17_t8(poly) \
static inline uint_fast32_t crc17_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_##poly##_tbl[((crc >> (17 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc17_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_byte_##poly##_impl(crc, data_byte) & 0x1ffff; \
} \
\
static uint_fast32_t crc17_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc17_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffff; \
} \

#define make_crc_kernel_r17_t8(poly) \
static inline uint_fast32_t crc17_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc17_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc17_byte_##poly##_impl(crc, data_byte) & 0x1ffff; \
} \
\
static uint_fast32_t crc17_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc17_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-18 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f18_t4(poly) \
static inline uint_fast32_t crc18_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc18_##poly##_tbl[((crc >> (18 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc18_##poly##_tbl[((crc >> (18 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc18_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_byte_##poly##_impl(crc, data_byte) & 0x3ffff; \
} \
\
static uint_fast32_t crc18_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc18_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffff; \
} \

#define make_crc_kernel_r18_t4(poly) \
static inline uint_fast32_t crc18_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc18_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc18_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc18_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_byte_##poly##_impl(crc, data_byte) & 0x3ffff; \
} \
\
static uint_fast32_t crc18_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc18_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffff; \
} \

#define make_crc_kernel_f18_t8(poly) \
static inline uint_fast32_t crc18_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_##poly##_tbl[((crc >> (18 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc18_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_byte_##poly##_impl(crc, data_byte) & 0x3ffff; \
} \
\
static uint_fast32_t crc18_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc18_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffff; \
} \

#define make_crc_kernel_r18_t8(poly) \
static inline uint_fast32_t crc18_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc18_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc18_byte_##poly##_impl(crc, data_byte) & 0x3ffff; \
} \
\
static uint_fast32_t crc18_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc18_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-19 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f19_t4(poly) \
static inline uint_fast32_t crc19_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc19_##poly##_tbl[((crc >> (19 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc19_##poly##_tbl[((crc >> (19 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc19_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_byte_##poly##_impl(crc, data_byte) & 0x7ffff; \
} \
\
static uint_fast32_t crc19_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc19_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffff; \
} \

#define make_crc_kernel_r19_t4(poly) \
static inline uint_fast32_t crc19_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc19_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc19_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc19_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_byte_##poly##_impl(crc, data_byte) & 0x7ffff; \
} \
\
static uint_fast32_t crc19_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc19_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffff; \
} \

#define make_crc_kernel_f19_t8(poly) \
static inline uint_fast32_t crc19_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_##poly##_tbl[((crc >> (19 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc19_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_byte_##poly##_impl(crc, data_byte) & 0x7ffff; \
} \
\
static uint_fast32_t crc19_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc19_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffff; \
} \

#define make_crc_kernel_r19_t8(poly) \
static inline uint_fast32_t crc19_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc19_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc19_byte_##poly##_impl(crc, data_byte) & 0x7ffff; \
} \
\
static uint_fast32_t crc19_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc19_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-20 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f20_t4(poly) \
static inline uint_fast32_t crc20_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc20_##poly##_tbl[((crc >> (20 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc20_##poly##_tbl[((crc >> (20 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc20_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_byte_##poly##_impl(crc, data_byte) & 0xfffff; \
} \
\
static uint_fast32_t crc20_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc20_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffff; \
} \

#define make_crc_kernel_r20_t4(poly) \
static inline uint_fast32_t crc20_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc20_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc20_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc20_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_byte_##poly##_impl(crc, data_byte) & 0xfffff; \
} \
\
static uint_fast32_t crc20_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc20_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffff; \
} \

#define make_crc_kernel_f20_t8(poly) \
static inline uint_fast32_t crc20_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_##poly##_tbl[((crc >> (20 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc20_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_byte_##poly##_impl(crc, data_byte) & 0xfffff; \
} \
\
static uint_fast32_t crc20_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc20_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffff; \
} \

#define make_crc_kernel_r20_t8(poly) \
static inline uint_fast32_t crc20_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc20_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc20_byte_##poly##_impl(crc, data_byte) & 0xfffff; \
} \
\
static uint_fast32_t crc20_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc20_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-21 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f21_t4(poly) \
static inline uint_fast32_t crc21_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc21_##poly##_tbl[((crc >> (21 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc21_##poly##_tbl[((crc >> (21 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc21_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_byte_##poly##_impl(crc, data_byte) & 0x1fffff; \
} \
\
static uint_fast32_t crc21_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc21_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffff; \
} \

#define make_crc_kernel_r21_t4(poly) \
static inline uint_fast32_t crc21_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc21_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc21_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc21_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_byte_##poly##_impl(crc, data_byte) & 0x1fffff; \
} \
\
static uint_fast32_t crc21_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc21_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffff; \
} \

#define make_crc_kernel_f21_t8(poly) \
static inline uint_fast32_t crc21_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_##poly##_tbl[((crc >> (21 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc21_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_byte_##poly##_impl(crc, data_byte) & 0x1fffff; \
} \
\
static uint_fast32_t crc21_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc21_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffff; \
} \

#define make_crc_kernel_r21_t8(poly) \
static inline uint_fast32_t crc21_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc21_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc21_byte_##poly##_impl(crc, data_byte) & 0x1fffff; \
} \
\
static uint_fast32_t crc21_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc21_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-22 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f22_t4(poly) \
static inline uint_fast32_t crc22_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc22_##poly##_tbl[((crc >> (22 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc22_##poly##_tbl[((crc >> (22 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc22_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_byte_##poly##_impl(crc, data_byte) & 0x3fffff; \
} \
\
static uint_fast32_t crc22_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc22_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffff; \
} \

#define make_crc_kernel_r22_t4(poly) \
static inline uint_fast32_t crc22_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc22_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc22_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc22_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_byte_##poly##_impl(crc, data_byte) & 0x3fffff; \
} \
\
static uint_fast32_t crc22_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc22_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffff; \
} \

#define make_crc_kernel_f22_t8(poly) \
static inline uint_fast32_t crc22_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_##poly##_tbl[((crc >> (22 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc22_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_byte_##poly##_impl(crc, data_byte) & 0x3fffff; \
} \
\
static uint_fast32_t crc22_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc22_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffff; \
} \

#define make_crc_kernel_r22_t8(poly) \
static inline uint_fast32_t crc22_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc22_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc22_byte_##poly##_impl(crc, data_byte) & 0x3fffff; \
} \
\
static uint_fast32_t crc22_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc22_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-23 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f23_t4(poly) \
static inline uint_fast32_t crc23_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc23_##poly##_tbl[((crc >> (23 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc23_##poly##_tbl[((crc >> (23 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc23_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_byte_##poly##_impl(crc, data_byte) & 0x7fffff; \
} \
\
static uint_fast32_t crc23_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc23_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffff; \
} \

#define make_crc_kernel_r23_t4(poly) \
static inline uint_fast32_t crc23_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc23_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc23_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc23_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_byte_##poly##_impl(crc, data_byte) & 0x7fffff; \
} \
\
static uint_fast32_t crc23_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc23_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffff; \
} \

#define make_crc_kernel_f23_t8(poly) \
static inline uint_fast32_t crc23_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_##poly##_tbl[((crc >> (23 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc23_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_byte_##poly##_impl(crc, data_byte) & 0x7fffff; \
} \
\
static uint_fast32_t crc23_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc23_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffff; \
} \

#define make_crc_kernel_r23_t8(poly) \
static inline uint_fast32_t crc23_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc23_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc23_byte_##poly##_impl(crc, data_byte) & 0x7fffff; \
} \
\
static uint_fast32_t crc23_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc23_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-24 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f24_t4(poly) \
static inline uint_fast32_t crc24_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc24_##poly##_tbl[((crc >> (24 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc24_##poly##_tbl[((crc >> (24 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc24_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_byte_##poly##_impl(crc, data_byte) & 0xffffff; \
} \
\
static uint_fast32_t crc24_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc24_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffff; \
} \

#define make_crc_kernel_r24_t4(poly) \
static inline uint_fast32_t crc24_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc24_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc24_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc24_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_byte_##poly##_impl(crc, data_byte) & 0xffffff; \
} \
\
static uint_fast32_t crc24_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc24_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffff; \
} \

#define make_crc_kernel_f24_t8(poly) \
static inline uint_fast32_t crc24_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_##poly##_tbl[((crc >> (24 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc24_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_byte_##poly##_impl(crc, data_byte) & 0xffffff; \
} \
\
static uint_fast32_t crc24_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc24_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffff; \
} \

#define make_crc_kernel_r24_t8(poly) \
static inline uint_fast32_t crc24_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc24_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc24_byte_##poly##_impl(crc, data_byte) & 0xffffff; \
} \
\
static uint_fast32_t crc24_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc24_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-25 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f25_t4(poly) \
static inline uint_fast32_t crc25_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc25_##poly##_tbl[((crc >> (25 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc25_##poly##_tbl[((crc >> (25 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc25_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_byte_##poly##_impl(crc, data_byte) & 0x1ffffff; \
} \
\
static uint_fast32_t crc25_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc25_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffff; \
} \

#define make_crc_kernel_r25_t4(poly) \
static inline uint_fast32_t crc25_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc25_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc25_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc25_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_byte_##poly##_impl(crc, data_byte) & 0x1ffffff; \
} \
\
static uint_fast32_t crc25_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc25_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffff; \
} \

#define make_crc_kernel_f25_t8(poly) \
static inline uint_fast32_t crc25_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_##poly##_tbl[((crc >> (25 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc25_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_byte_##poly##_impl(crc, data_byte) & 0x1ffffff; \
} \
\
static uint_fast32_t crc25_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc25_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffff; \
} \

#define make_crc_kernel_r25_t8(poly) \
static inline uint_fast32_t crc25_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc25_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc25_byte_##poly##_impl(crc, data_byte) & 0x1ffffff; \
} \
\
static uint_fast32_t crc25_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc25_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-26 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f26_t4(poly) \
static inline uint_fast32_t crc26_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc26_##poly##_tbl[((crc >> (26 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc26_##poly##_tbl[((crc >> (26 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc26_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_byte_##poly##_impl(crc, data_byte) & 0x3ffffff; \
} \
\
static uint_fast32_t crc26_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc26_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffff; \
} \

#define make_crc_kernel_r26_t4(poly) \
static inline uint_fast32_t crc26_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc26_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc26_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc26_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_byte_##poly##_impl(crc, data_byte) & 0x3ffffff; \
} \
\
static uint_fast32_t crc26_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc26_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffff; \
} \

#define make_crc_kernel_f26_t8(poly) \
static inline uint_fast32_t crc26_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_##poly##_tbl[((crc >> (26 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc26_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_byte_##poly##_impl(crc, data_byte) & 0x3ffffff; \
} \
\
static uint_fast32_t crc26_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc26_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffff; \
} \

#define make_crc_kernel_r26_t8(poly) \
static inline uint_fast32_t crc26_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc26_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc26_byte_##poly##_impl(crc, data_byte) & 0x3ffffff; \
} \
\
static uint_fast32_t crc26_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc26_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-27 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f27_t4(poly) \
static inline uint_fast32_t crc27_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc27_##poly##_tbl[((crc >> (27 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc27_##poly##_tbl[((crc >> (27 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc27_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_byte_##poly##_impl(crc, data_byte) & 0x7ffffff; \
} \
\
static uint_fast32_t crc27_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc27_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffff; \
} \

#define make_crc_kernel_r27_t4(poly) \
static inline uint_fast32_t crc27_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc27_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc27_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc27_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_byte_##poly##_impl(crc, data_byte) & 0x7ffffff; \
} \
\
static uint_fast32_t crc27_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc27_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffff; \
} \

#define make_crc_kernel_f27_t8(poly) \
static inline uint_fast32_t crc27_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_##poly##_tbl[((crc >> (27 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc27_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_byte_##poly##_impl(crc, data_byte) & 0x7ffffff; \
} \
\
static uint_fast32_t crc27_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc27_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffff; \
} \

#define make_crc_kernel_r27_t8(poly) \
static inline uint_fast32_t crc27_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc27_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc27_byte_##poly##_impl(crc, data_byte) & 0x7ffffff; \
} \
\
static uint_fast32_t crc27_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc27_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-28 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f28_t4(poly) \
static inline uint_fast32_t crc28_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc28_##poly##_tbl[((crc >> (28 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc28_##poly##_tbl[((crc >> (28 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc28_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_byte_##poly##_impl(crc, data_byte) & 0xfffffff; \
} \
\
static uint_fast32_t crc28_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc28_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffff; \
} \

#define make_crc_kernel_r28_t4(poly) \
static inline uint_fast32_t crc28_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc28_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc28_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc28_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_byte_##poly##_impl(crc, data_byte) & 0xfffffff; \
} \
\
static uint_fast32_t crc28_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc28_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffff; \
} \

#define make_crc_kernel_f28_t8(poly) \
static inline uint_fast32_t crc28_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_##poly##_tbl[((crc >> (28 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc28_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_byte_##poly##_impl(crc, data_byte) & 0xfffffff; \
} \
\
static uint_fast32_t crc28_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc28_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffff; \
} \

#define make_crc_kernel_r28_t8(poly) \
static inline uint_fast32_t crc28_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc28_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc28_byte_##poly##_impl(crc, data_byte) & 0xfffffff; \
} \
\
static uint_fast32_t crc28_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc28_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-29 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f29_t4(poly) \
static inline uint_fast32_t crc29_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc29_##poly##_tbl[((crc >> (29 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc29_##poly##_tbl[((crc >> (29 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc29_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_byte_##poly##_impl(crc, data_byte) & 0x1fffffff; \
} \
\
static uint_fast32_t crc29_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc29_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffff; \
} \

#define make_crc_kernel_r29_t4(poly) \
static inline uint_fast32_t crc29_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc29_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc29_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc29_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_byte_##poly##_impl(crc, data_byte) & 0x1fffffff; \
} \
\
static uint_fast32_t crc29_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc29_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffff; \
} \

#define make_crc_kernel_f29_t8(poly) \
static inline uint_fast32_t crc29_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_##poly##_tbl[((crc >> (29 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc29_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_byte_##poly##_impl(crc, data_byte) & 0x1fffffff; \
} \
\
static uint_fast32_t crc29_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc29_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffff; \
} \

#define make_crc_kernel_r29_t8(poly) \
static inline uint_fast32_t crc29_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc29_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc29_byte_##poly##_impl(crc, data_byte) & 0x1fffffff; \
} \
\
static uint_fast32_t crc29_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc29_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-30 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f30_t4(poly) \
static inline uint_fast32_t crc30_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc30_##poly##_tbl[((crc >> (30 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc30_##poly##_tbl[((crc >> (30 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc30_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_byte_##poly##_impl(crc, data_byte) & 0x3fffffff; \
} \
\
static uint_fast32_t crc30_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc30_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffff; \
} \

#define make_crc_kernel_r30_t4(poly) \
static inline uint_fast32_t crc30_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc30_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc30_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc30_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_byte_##poly##_impl(crc, data_byte) & 0x3fffffff; \
} \
\
static uint_fast32_t crc30_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc30_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffff; \
} \

#define make_crc_kernel_f30_t8(poly) \
static inline uint_fast32_t crc30_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_##poly##_tbl[((crc >> (30 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc30_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_byte_##poly##_impl(crc, data_byte) & 0x3fffffff; \
} \
\
static uint_fast32_t crc30_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc30_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffff; \
} \

#define make_crc_kernel_r30_t8(poly) \
static inline uint_fast32_t crc30_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc30_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc30_byte_##poly##_impl(crc, data_byte) & 0x3fffffff; \
} \
\
static uint_fast32_t crc30_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc30_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-31 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f31_t4(poly) \
static inline uint_fast32_t crc31_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc31_##poly##_tbl[((crc >> (31 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc31_##poly##_tbl[((crc >> (31 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc31_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_byte_##poly##_impl(crc, data_byte) & 0x7fffffff; \
} \
\
static uint_fast32_t crc31_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc31_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffff; \
} \

#define make_crc_kernel_r31_t4(poly) \
static inline uint_fast32_t crc31_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc31_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc31_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc31_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_byte_##poly##_impl(crc, data_byte) & 0x7fffffff; \
} \
\
static uint_fast32_t crc31_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc31_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffff; \
} \

#define make_crc_kernel_f31_t8(poly) \
static inline uint_fast32_t crc31_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_##poly##_tbl[((crc >> (31 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc31_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_byte_##poly##_impl(crc, data_byte) & 0x7fffffff; \
} \
\
static uint_fast32_t crc31_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc31_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffff; \
} \

#define make_crc_kernel_r31_t8(poly) \
static inline uint_fast32_t crc31_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc31_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc31_byte_##poly##_impl(crc, data_byte) & 0x7fffffff; \
} \
\
static uint_fast32_t crc31_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc31_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-32 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f32_t4(poly) \
static inline uint_fast32_t crc32_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc32_##poly##_tbl[((crc >> (32 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc32_##poly##_tbl[((crc >> (32 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc32_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_byte_##poly##_impl(crc, data_byte) & 0xffffffff; \
} \
\
static uint_fast32_t crc32_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc32_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffff; \
} \

#define make_crc_kernel_r32_t4(poly) \
static inline uint_fast32_t crc32_byte_##poly##_impl(uint_fast32_t crc, uint8_t const data_byte) \
{ \
  crc = crc32_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc32_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast32_t crc32_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_byte_##poly##_impl(crc, data_byte) & 0xffffffff; \
} \
\
static uint_fast32_t crc32_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc32_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffff; \
} \

#define make_crc_kernel_f32_t8(poly) \
static inline uint_fast32_t crc32_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_##poly##_tbl[((crc >> (32 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast32_t crc32_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_byte_##poly##_impl(crc, data_byte) & 0xffffffff; \
} \
\
static uint_fast32_t crc32_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc32_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffff; \
} \

#define make_crc_kernel_r32_t8(poly) \
static inline uint_fast32_t crc32_byte_##poly##_impl(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast32_t crc32_byte_##poly(uint_fast32_t const crc, uint8_t const data_byte) \
{ \
  return crc32_byte_##poly##_impl(crc, data_byte) & 0xffffffff; \
} \
\
static uint_fast32_t crc32_##poly(uint_fast32_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast32_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc32_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-33 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f33_t4(poly) \
static inline uint_fast64_t crc33_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc33_##poly##_tbl[((crc >> (33 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc33_##poly##_tbl[((crc >> (33 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc33_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_byte_##poly##_impl(crc, data_byte) & 0x1ffffffff; \
} \
\
static uint_fast64_t crc33_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc33_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffff; \
} \

#define make_crc_kernel_r33_t4(poly) \
static inline uint_fast64_t crc33_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc33_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc33_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc33_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_byte_##poly##_impl(crc, data_byte) & 0x1ffffffff; \
} \
\
static uint_fast64_t crc33_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc33_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffff; \
} \

#define make_crc_kernel_f33_t8(poly) \
static inline uint_fast64_t crc33_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_##poly##_tbl[((crc >> (33 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc33_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_byte_##poly##_impl(crc, data_byte) & 0x1ffffffff; \
} \
\
static uint_fast64_t crc33_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc33_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffff; \
} \

#define make_crc_kernel_r33_t8(poly) \
static inline uint_fast64_t crc33_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc33_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc33_byte_##poly##_impl(crc, data_byte) & 0x1ffffffff; \
} \
\
static uint_fast64_t crc33_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc33_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-34 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f34_t4(poly) \
static inline uint_fast64_t crc34_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc34_##poly##_tbl[((crc >> (34 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc34_##poly##_tbl[((crc >> (34 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc34_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_byte_##poly##_impl(crc, data_byte) & 0x3ffffffff; \
} \
\
static uint_fast64_t crc34_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc34_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffff; \
} \

#define make_crc_kernel_r34_t4(poly) \
static inline uint_fast64_t crc34_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc34_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc34_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc34_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_byte_##poly##_impl(crc, data_byte) & 0x3ffffffff; \
} \
\
static uint_fast64_t crc34_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc34_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffff; \
} \

#define make_crc_kernel_f34_t8(poly) \
static inline uint_fast64_t crc34_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_##poly##_tbl[((crc >> (34 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc34_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_byte_##poly##_impl(crc, data_byte) & 0x3ffffffff; \
} \
\
static uint_fast64_t crc34_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc34_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffff; \
} \

#define make_crc_kernel_r34_t8(poly) \
static inline uint_fast64_t crc34_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc34_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc34_byte_##poly##_impl(crc, data_byte) & 0x3ffffffff; \
} \
\
static uint_fast64_t crc34_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc34_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-35 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f35_t4(poly) \
static inline uint_fast64_t crc35_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc35_##poly##_tbl[((crc >> (35 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc35_##poly##_tbl[((crc >> (35 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc35_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_byte_##poly##_impl(crc, data_byte) & 0x7ffffffff; \
} \
\
static uint_fast64_t crc35_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc35_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffff; \
} \

#define make_crc_kernel_r35_t4(poly) \
static inline uint_fast64_t crc35_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc35_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc35_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc35_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_byte_##poly##_impl(crc, data_byte) & 0x7ffffffff; \
} \
\
static uint_fast64_t crc35_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc35_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffff; \
} \

#define make_crc_kernel_f35_t8(poly) \
static inline uint_fast64_t crc35_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_##poly##_tbl[((crc >> (35 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc35_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_byte_##poly##_impl(crc, data_byte) & 0x7ffffffff; \
} \
\
static uint_fast64_t crc35_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc35_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffff; \
} \

#define make_crc_kernel_r35_t8(poly) \
static inline uint_fast64_t crc35_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc35_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc35_byte_##poly##_impl(crc, data_byte) & 0x7ffffffff; \
} \
\
static uint_fast64_t crc35_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc35_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-36 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f36_t4(poly) \
static inline uint_fast64_t crc36_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc36_##poly##_tbl[((crc >> (36 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc36_##poly##_tbl[((crc >> (36 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc36_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_byte_##poly##_impl(crc, data_byte) & 0xfffffffff; \
} \
\
static uint_fast64_t crc36_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc36_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffff; \
} \

#define make_crc_kernel_r36_t4(poly) \
static inline uint_fast64_t crc36_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc36_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc36_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc36_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_byte_##poly##_impl(crc, data_byte) & 0xfffffffff; \
} \
\
static uint_fast64_t crc36_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc36_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffff; \
} \

#define make_crc_kernel_f36_t8(poly) \
static inline uint_fast64_t crc36_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_##poly##_tbl[((crc >> (36 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc36_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_byte_##poly##_impl(crc, data_byte) & 0xfffffffff; \
} \
\
static uint_fast64_t crc36_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc36_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffff; \
} \

#define make_crc_kernel_r36_t8(poly) \
static inline uint_fast64_t crc36_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc36_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc36_byte_##poly##_impl(crc, data_byte) & 0xfffffffff; \
} \
\
static uint_fast64_t crc36_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc36_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-37 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f37_t4(poly) \
static inline uint_fast64_t crc37_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc37_##poly##_tbl[((crc >> (37 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc37_##poly##_tbl[((crc >> (37 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc37_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_byte_##poly##_impl(crc, data_byte) & 0x1fffffffff; \
} \
\
static uint_fast64_t crc37_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc37_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffff; \
} \

#define make_crc_kernel_r37_t4(poly) \
static inline uint_fast64_t crc37_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc37_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc37_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc37_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_byte_##poly##_impl(crc, data_byte) & 0x1fffffffff; \
} \
\
static uint_fast64_t crc37_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc37_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffff; \
} \

#define make_crc_kernel_f37_t8(poly) \
static inline uint_fast64_t crc37_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_##poly##_tbl[((crc >> (37 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc37_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_byte_##poly##_impl(crc, data_byte) & 0x1fffffffff; \
} \
\
static uint_fast64_t crc37_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc37_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffff; \
} \

#define make_crc_kernel_r37_t8(poly) \
static inline uint_fast64_t crc37_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc37_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc37_byte_##poly##_impl(crc, data_byte) & 0x1fffffffff; \
} \
\
static uint_fast64_t crc37_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc37_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-38 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f38_t4(poly) \
static inline uint_fast64_t crc38_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc38_##poly##_tbl[((crc >> (38 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc38_##poly##_tbl[((crc >> (38 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc38_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_byte_##poly##_impl(crc, data_byte) & 0x3fffffffff; \
} \
\
static uint_fast64_t crc38_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc38_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffff; \
} \

#define make_crc_kernel_r38_t4(poly) \
static inline uint_fast64_t crc38_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc38_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc38_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc38_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_byte_##poly##_impl(crc, data_byte) & 0x3fffffffff; \
} \
\
static uint_fast64_t crc38_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc38_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffff; \
} \

#define make_crc_kernel_f38_t8(poly) \
static inline uint_fast64_t crc38_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_##poly##_tbl[((crc >> (38 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc38_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_byte_##poly##_impl(crc, data_byte) & 0x3fffffffff; \
} \
\
static uint_fast64_t crc38_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc38_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffff; \
} \

#define make_crc_kernel_r38_t8(poly) \
static inline uint_fast64_t crc38_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc38_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc38_byte_##poly##_impl(crc, data_byte) & 0x3fffffffff; \
} \
\
static uint_fast64_t crc38_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc38_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-39 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f39_t4(poly) \
static inline uint_fast64_t crc39_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc39_##poly##_tbl[((crc >> (39 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc39_##poly##_tbl[((crc >> (39 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc39_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_byte_##poly##_impl(crc, data_byte) & 0x7fffffffff; \
} \
\
static uint_fast64_t crc39_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc39_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffff; \
} \

#define make_crc_kernel_r39_t4(poly) \
static inline uint_fast64_t crc39_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc39_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc39_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc39_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_byte_##poly##_impl(crc, data_byte) & 0x7fffffffff; \
} \
\
static uint_fast64_t crc39_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc39_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffff; \
} \

#define make_crc_kernel_f39_t8(poly) \
static inline uint_fast64_t crc39_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_##poly##_tbl[((crc >> (39 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc39_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_byte_##poly##_impl(crc, data_byte) & 0x7fffffffff; \
} \
\
static uint_fast64_t crc39_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc39_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffff; \
} \

#define make_crc_kernel_r39_t8(poly) \
static inline uint_fast64_t crc39_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc39_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc39_byte_##poly##_impl(crc, data_byte) & 0x7fffffffff; \
} \
\
static uint_fast64_t crc39_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc39_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-40 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f40_t4(poly) \
static inline uint_fast64_t crc40_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc40_##poly##_tbl[((crc >> (40 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc40_##poly##_tbl[((crc >> (40 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc40_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_byte_##poly##_impl(crc, data_byte) & 0xffffffffff; \
} \
\
static uint_fast64_t crc40_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc40_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffff; \
} \

#define make_crc_kernel_r40_t4(poly) \
static inline uint_fast64_t crc40_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc40_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc40_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc40_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_byte_##poly##_impl(crc, data_byte) & 0xffffffffff; \
} \
\
static uint_fast64_t crc40_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc40_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffff; \
} \

#define make_crc_kernel_f40_t8(poly) \
static inline uint_fast64_t crc40_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_##poly##_tbl[((crc >> (40 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc40_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_byte_##poly##_impl(crc, data_byte) & 0xffffffffff; \
} \
\
static uint_fast64_t crc40_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc40_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffff; \
} \

#define make_crc_kernel_r40_t8(poly) \
static inline uint_fast64_t crc40_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc40_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc40_byte_##poly##_impl(crc, data_byte) & 0xffffffffff; \
} \
\
static uint_fast64_t crc40_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc40_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-41 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f41_t4(poly) \
static inline uint_fast64_t crc41_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc41_##poly##_tbl[((crc >> (41 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc41_##poly##_tbl[((crc >> (41 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc41_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffff; \
} \
\
static uint_fast64_t crc41_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc41_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffff; \
} \

#define make_crc_kernel_r41_t4(poly) \
static inline uint_fast64_t crc41_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc41_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc41_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc41_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffff; \
} \
\
static uint_fast64_t crc41_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc41_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffff; \
} \

#define make_crc_kernel_f41_t8(poly) \
static inline uint_fast64_t crc41_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_##poly##_tbl[((crc >> (41 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc41_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffff; \
} \
\
static uint_fast64_t crc41_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc41_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffff; \
} \

#define make_crc_kernel_r41_t8(poly) \
static inline uint_fast64_t crc41_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc41_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc41_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffff; \
} \
\
static uint_fast64_t crc41_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc41_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-42 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f42_t4(poly) \
static inline uint_fast64_t crc42_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc42_##poly##_tbl[((crc >> (42 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc42_##poly##_tbl[((crc >> (42 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc42_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffff; \
} \
\
static uint_fast64_t crc42_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc42_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffff; \
} \

#define make_crc_kernel_r42_t4(poly) \
static inline uint_fast64_t crc42_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc42_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc42_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc42_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffff; \
} \
\
static uint_fast64_t crc42_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc42_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffff; \
} \

#define make_crc_kernel_f42_t8(poly) \
static inline uint_fast64_t crc42_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_##poly##_tbl[((crc >> (42 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc42_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffff; \
} \
\
static uint_fast64_t crc42_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc42_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffff; \
} \

#define make_crc_kernel_r42_t8(poly) \
static inline uint_fast64_t crc42_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc42_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc42_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffff; \
} \
\
static uint_fast64_t crc42_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc42_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-43 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f43_t4(poly) \
static inline uint_fast64_t crc43_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc43_##poly##_tbl[((crc >> (43 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc43_##poly##_tbl[((crc >> (43 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc43_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffff; \
} \
\
static uint_fast64_t crc43_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc43_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffff; \
} \

#define make_crc_kernel_r43_t4(poly) \
static inline uint_fast64_t crc43_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc43_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc43_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc43_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffff; \
} \
\
static uint_fast64_t crc43_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc43_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffff; \
} \

#define make_crc_kernel_f43_t8(poly) \
static inline uint_fast64_t crc43_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_##poly##_tbl[((crc >> (43 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc43_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffff; \
} \
\
static uint_fast64_t crc43_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc43_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffff; \
} \

#define make_crc_kernel_r43_t8(poly) \
static inline uint_fast64_t crc43_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc43_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc43_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffff; \
} \
\
static uint_fast64_t crc43_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc43_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-44 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f44_t4(poly) \
static inline uint_fast64_t crc44_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc44_##poly##_tbl[((crc >> (44 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc44_##poly##_tbl[((crc >> (44 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc44_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_byte_##poly##_impl(crc, data_byte) & 0xfffffffffff; \
} \
\
static uint_fast64_t crc44_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc44_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffff; \
} \

#define make_crc_kernel_r44_t4(poly) \
static inline uint_fast64_t crc44_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc44_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc44_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc44_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_byte_##poly##_impl(crc, data_byte) & 0xfffffffffff; \
} \
\
static uint_fast64_t crc44_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc44_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffff; \
} \

#define make_crc_kernel_f44_t8(poly) \
static inline uint_fast64_t crc44_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_##poly##_tbl[((crc >> (44 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc44_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_byte_##poly##_impl(crc, data_byte) & 0xfffffffffff; \
} \
\
static uint_fast64_t crc44_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc44_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffff; \
} \

#define make_crc_kernel_r44_t8(poly) \
static inline uint_fast64_t crc44_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc44_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc44_byte_##poly##_impl(crc, data_byte) & 0xfffffffffff; \
} \
\
static uint_fast64_t crc44_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc44_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-45 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f45_t4(poly) \
static inline uint_fast64_t crc45_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc45_##poly##_tbl[((crc >> (45 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc45_##poly##_tbl[((crc >> (45 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc45_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffff; \
} \
\
static uint_fast64_t crc45_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc45_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffff; \
} \

#define make_crc_kernel_r45_t4(poly) \
static inline uint_fast64_t crc45_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc45_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc45_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc45_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffff; \
} \
\
static uint_fast64_t crc45_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc45_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffff; \
} \

#define make_crc_kernel_f45_t8(poly) \
static inline uint_fast64_t crc45_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_##poly##_tbl[((crc >> (45 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc45_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffff; \
} \
\
static uint_fast64_t crc45_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc45_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffff; \
} \

#define make_crc_kernel_r45_t8(poly) \
static inline uint_fast64_t crc45_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc45_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc45_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffff; \
} \
\
static uint_fast64_t crc45_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc45_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-46 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f46_t4(poly) \
static inline uint_fast64_t crc46_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc46_##poly##_tbl[((crc >> (46 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc46_##poly##_tbl[((crc >> (46 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc46_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffff; \
} \
\
static uint_fast64_t crc46_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc46_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffff; \
} \

#define make_crc_kernel_r46_t4(poly) \
static inline uint_fast64_t crc46_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc46_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc46_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc46_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffff; \
} \
\
static uint_fast64_t crc46_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc46_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffff; \
} \

#define make_crc_kernel_f46_t8(poly) \
static inline uint_fast64_t crc46_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_##poly##_tbl[((crc >> (46 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc46_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffff; \
} \
\
static uint_fast64_t crc46_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc46_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffff; \
} \

#define make_crc_kernel_r46_t8(poly) \
static inline uint_fast64_t crc46_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc46_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc46_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffff; \
} \
\
static uint_fast64_t crc46_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc46_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-47 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f47_t4(poly) \
static inline uint_fast64_t crc47_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc47_##poly##_tbl[((crc >> (47 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc47_##poly##_tbl[((crc >> (47 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc47_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffff; \
} \
\
static uint_fast64_t crc47_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc47_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffff; \
} \

#define make_crc_kernel_r47_t4(poly) \
static inline uint_fast64_t crc47_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc47_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc47_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc47_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffff; \
} \
\
static uint_fast64_t crc47_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc47_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffff; \
} \

#define make_crc_kernel_f47_t8(poly) \
static inline uint_fast64_t crc47_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_##poly##_tbl[((crc >> (47 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc47_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffff; \
} \
\
static uint_fast64_t crc47_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc47_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffff; \
} \

#define make_crc_kernel_r47_t8(poly) \
static inline uint_fast64_t crc47_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc47_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc47_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffff; \
} \
\
static uint_fast64_t crc47_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc47_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-48 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f48_t4(poly) \
static inline uint_fast64_t crc48_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc48_##poly##_tbl[((crc >> (48 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc48_##poly##_tbl[((crc >> (48 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc48_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_byte_##poly##_impl(crc, data_byte) & 0xffffffffffff; \
} \
\
static uint_fast64_t crc48_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc48_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffff; \
} \

#define make_crc_kernel_r48_t4(poly) \
static inline uint_fast64_t crc48_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc48_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc48_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc48_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_byte_##poly##_impl(crc, data_byte) & 0xffffffffffff; \
} \
\
static uint_fast64_t crc48_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc48_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffff; \
} \

#define make_crc_kernel_f48_t8(poly) \
static inline uint_fast64_t crc48_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_##poly##_tbl[((crc >> (48 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc48_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_byte_##poly##_impl(crc, data_byte) & 0xffffffffffff; \
} \
\
static uint_fast64_t crc48_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc48_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffff; \
} \

#define make_crc_kernel_r48_t8(poly) \
static inline uint_fast64_t crc48_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc48_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc48_byte_##poly##_impl(crc, data_byte) & 0xffffffffffff; \
} \
\
static uint_fast64_t crc48_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc48_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-49 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f49_t4(poly) \
static inline uint_fast64_t crc49_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc49_##poly##_tbl[((crc >> (49 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc49_##poly##_tbl[((crc >> (49 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc49_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffff; \
} \
\
static uint_fast64_t crc49_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc49_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffff; \
} \

#define make_crc_kernel_r49_t4(poly) \
static inline uint_fast64_t crc49_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc49_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc49_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc49_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffff; \
} \
\
static uint_fast64_t crc49_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc49_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffff; \
} \

#define make_crc_kernel_f49_t8(poly) \
static inline uint_fast64_t crc49_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_##poly##_tbl[((crc >> (49 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc49_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffff; \
} \
\
static uint_fast64_t crc49_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc49_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffff; \
} \

#define make_crc_kernel_r49_t8(poly) \
static inline uint_fast64_t crc49_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc49_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc49_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffff; \
} \
\
static uint_fast64_t crc49_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc49_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-50 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f50_t4(poly) \
static inline uint_fast64_t crc50_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc50_##poly##_tbl[((crc >> (50 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc50_##poly##_tbl[((crc >> (50 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc50_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffff; \
} \
\
static uint_fast64_t crc50_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc50_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffff; \
} \

#define make_crc_kernel_r50_t4(poly) \
static inline uint_fast64_t crc50_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc50_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc50_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc50_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffff; \
} \
\
static uint_fast64_t crc50_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc50_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffff; \
} \

#define make_crc_kernel_f50_t8(poly) \
static inline uint_fast64_t crc50_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_##poly##_tbl[((crc >> (50 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc50_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffff; \
} \
\
static uint_fast64_t crc50_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc50_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffff; \
} \

#define make_crc_kernel_r50_t8(poly) \
static inline uint_fast64_t crc50_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc50_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc50_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffff; \
} \
\
static uint_fast64_t crc50_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc50_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-51 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f51_t4(poly) \
static inline uint_fast64_t crc51_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc51_##poly##_tbl[((crc >> (51 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc51_##poly##_tbl[((crc >> (51 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc51_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffff; \
} \
\
static uint_fast64_t crc51_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc51_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffff; \
} \

#define make_crc_kernel_r51_t4(poly) \
static inline uint_fast64_t crc51_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc51_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc51_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc51_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffff; \
} \
\
static uint_fast64_t crc51_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc51_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffff; \
} \

#define make_crc_kernel_f51_t8(poly) \
static inline uint_fast64_t crc51_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_##poly##_tbl[((crc >> (51 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc51_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffff; \
} \
\
static uint_fast64_t crc51_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc51_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffff; \
} \

#define make_crc_kernel_r51_t8(poly) \
static inline uint_fast64_t crc51_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc51_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc51_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffff; \
} \
\
static uint_fast64_t crc51_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc51_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-52 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f52_t4(poly) \
static inline uint_fast64_t crc52_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc52_##poly##_tbl[((crc >> (52 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc52_##poly##_tbl[((crc >> (52 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc52_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffff; \
} \
\
static uint_fast64_t crc52_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc52_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffff; \
} \

#define make_crc_kernel_r52_t4(poly) \
static inline uint_fast64_t crc52_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc52_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc52_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc52_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffff; \
} \
\
static uint_fast64_t crc52_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc52_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffff; \
} \

#define make_crc_kernel_f52_t8(poly) \
static inline uint_fast64_t crc52_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_##poly##_tbl[((crc >> (52 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc52_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffff; \
} \
\
static uint_fast64_t crc52_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc52_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffff; \
} \

#define make_crc_kernel_r52_t8(poly) \
static inline uint_fast64_t crc52_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc52_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc52_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffff; \
} \
\
static uint_fast64_t crc52_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc52_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-53 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f53_t4(poly) \
static inline uint_fast64_t crc53_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc53_##poly##_tbl[((crc >> (53 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc53_##poly##_tbl[((crc >> (53 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc53_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffff; \
} \
\
static uint_fast64_t crc53_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc53_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffff; \
} \

#define make_crc_kernel_r53_t4(poly) \
static inline uint_fast64_t crc53_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc53_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc53_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc53_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffff; \
} \
\
static uint_fast64_t crc53_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc53_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffff; \
} \

#define make_crc_kernel_f53_t8(poly) \
static inline uint_fast64_t crc53_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_##poly##_tbl[((crc >> (53 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc53_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffff; \
} \
\
static uint_fast64_t crc53_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc53_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffff; \
} \

#define make_crc_kernel_r53_t8(poly) \
static inline uint_fast64_t crc53_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc53_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc53_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffff; \
} \
\
static uint_fast64_t crc53_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc53_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-54 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f54_t4(poly) \
static inline uint_fast64_t crc54_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc54_##poly##_tbl[((crc >> (54 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc54_##poly##_tbl[((crc >> (54 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc54_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffff; \
} \
\
static uint_fast64_t crc54_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc54_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffff; \
} \

#define make_crc_kernel_r54_t4(poly) \
static inline uint_fast64_t crc54_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc54_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc54_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc54_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffff; \
} \
\
static uint_fast64_t crc54_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc54_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffff; \
} \

#define make_crc_kernel_f54_t8(poly) \
static inline uint_fast64_t crc54_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_##poly##_tbl[((crc >> (54 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc54_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffff; \
} \
\
static uint_fast64_t crc54_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc54_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffff; \
} \

#define make_crc_kernel_r54_t8(poly) \
static inline uint_fast64_t crc54_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc54_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc54_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffff; \
} \
\
static uint_fast64_t crc54_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc54_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-55 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f55_t4(poly) \
static inline uint_fast64_t crc55_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc55_##poly##_tbl[((crc >> (55 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc55_##poly##_tbl[((crc >> (55 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc55_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffff; \
} \
\
static uint_fast64_t crc55_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc55_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffff; \
} \

#define make_crc_kernel_r55_t4(poly) \
static inline uint_fast64_t crc55_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc55_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc55_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc55_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffff; \
} \
\
static uint_fast64_t crc55_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc55_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffff; \
} \

#define make_crc_kernel_f55_t8(poly) \
static inline uint_fast64_t crc55_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_##poly##_tbl[((crc >> (55 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc55_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffff; \
} \
\
static uint_fast64_t crc55_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc55_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffff; \
} \

#define make_crc_kernel_r55_t8(poly) \
static inline uint_fast64_t crc55_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc55_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc55_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffff; \
} \
\
static uint_fast64_t crc55_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc55_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-56 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f56_t4(poly) \
static inline uint_fast64_t crc56_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc56_##poly##_tbl[((crc >> (56 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc56_##poly##_tbl[((crc >> (56 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc56_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffff; \
} \
\
static uint_fast64_t crc56_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc56_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffff; \
} \

#define make_crc_kernel_r56_t4(poly) \
static inline uint_fast64_t crc56_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc56_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc56_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc56_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffff; \
} \
\
static uint_fast64_t crc56_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc56_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffff; \
} \

#define make_crc_kernel_f56_t8(poly) \
static inline uint_fast64_t crc56_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_##poly##_tbl[((crc >> (56 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc56_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffff; \
} \
\
static uint_fast64_t crc56_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc56_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffff; \
} \

#define make_crc_kernel_r56_t8(poly) \
static inline uint_fast64_t crc56_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc56_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc56_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffff; \
} \
\
static uint_fast64_t crc56_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc56_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-57 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f57_t4(poly) \
static inline uint_fast64_t crc57_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc57_##poly##_tbl[((crc >> (57 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc57_##poly##_tbl[((crc >> (57 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc57_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffffff; \
} \
\
static uint_fast64_t crc57_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc57_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffffff; \
} \

#define make_crc_kernel_r57_t4(poly) \
static inline uint_fast64_t crc57_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc57_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc57_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc57_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffffff; \
} \
\
static uint_fast64_t crc57_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc57_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffffff; \
} \

#define make_crc_kernel_f57_t8(poly) \
static inline uint_fast64_t crc57_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_##poly##_tbl[((crc >> (57 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc57_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffffff; \
} \
\
static uint_fast64_t crc57_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc57_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffffff; \
} \

#define make_crc_kernel_r57_t8(poly) \
static inline uint_fast64_t crc57_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc57_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc57_byte_##poly##_impl(crc, data_byte) & 0x1ffffffffffffff; \
} \
\
static uint_fast64_t crc57_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc57_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1ffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-58 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f58_t4(poly) \
static inline uint_fast64_t crc58_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc58_##poly##_tbl[((crc >> (58 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc58_##poly##_tbl[((crc >> (58 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc58_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffffff; \
} \
\
static uint_fast64_t crc58_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc58_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffffff; \
} \

#define make_crc_kernel_r58_t4(poly) \
static inline uint_fast64_t crc58_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc58_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc58_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc58_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffffff; \
} \
\
static uint_fast64_t crc58_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc58_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffffff; \
} \

#define make_crc_kernel_f58_t8(poly) \
static inline uint_fast64_t crc58_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_##poly##_tbl[((crc >> (58 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc58_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffffff; \
} \
\
static uint_fast64_t crc58_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc58_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffffff; \
} \

#define make_crc_kernel_r58_t8(poly) \
static inline uint_fast64_t crc58_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc58_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc58_byte_##poly##_impl(crc, data_byte) & 0x3ffffffffffffff; \
} \
\
static uint_fast64_t crc58_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc58_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3ffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-59 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f59_t4(poly) \
static inline uint_fast64_t crc59_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc59_##poly##_tbl[((crc >> (59 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc59_##poly##_tbl[((crc >> (59 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc59_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffffff; \
} \
\
static uint_fast64_t crc59_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc59_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffffff; \
} \

#define make_crc_kernel_r59_t4(poly) \
static inline uint_fast64_t crc59_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc59_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc59_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc59_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffffff; \
} \
\
static uint_fast64_t crc59_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc59_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffffff; \
} \

#define make_crc_kernel_f59_t8(poly) \
static inline uint_fast64_t crc59_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_##poly##_tbl[((crc >> (59 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc59_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffffff; \
} \
\
static uint_fast64_t crc59_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc59_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffffff; \
} \

#define make_crc_kernel_r59_t8(poly) \
static inline uint_fast64_t crc59_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc59_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc59_byte_##poly##_impl(crc, data_byte) & 0x7ffffffffffffff; \
} \
\
static uint_fast64_t crc59_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc59_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7ffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-60 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f60_t4(poly) \
static inline uint_fast64_t crc60_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc60_##poly##_tbl[((crc >> (60 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc60_##poly##_tbl[((crc >> (60 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc60_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffffff; \
} \
\
static uint_fast64_t crc60_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc60_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffffff; \
} \

#define make_crc_kernel_r60_t4(poly) \
static inline uint_fast64_t crc60_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc60_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc60_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc60_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffffff; \
} \
\
static uint_fast64_t crc60_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc60_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffffff; \
} \

#define make_crc_kernel_f60_t8(poly) \
static inline uint_fast64_t crc60_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_##poly##_tbl[((crc >> (60 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc60_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffffff; \
} \
\
static uint_fast64_t crc60_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc60_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffffff; \
} \

#define make_crc_kernel_r60_t8(poly) \
static inline uint_fast64_t crc60_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc60_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc60_byte_##poly##_impl(crc, data_byte) & 0xfffffffffffffff; \
} \
\
static uint_fast64_t crc60_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc60_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xfffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-61 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f61_t4(poly) \
static inline uint_fast64_t crc61_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc61_##poly##_tbl[((crc >> (61 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc61_##poly##_tbl[((crc >> (61 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc61_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffffff; \
} \
\
static uint_fast64_t crc61_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc61_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffffff; \
} \

#define make_crc_kernel_r61_t4(poly) \
static inline uint_fast64_t crc61_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc61_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc61_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc61_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffffff; \
} \
\
static uint_fast64_t crc61_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc61_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffffff; \
} \

#define make_crc_kernel_f61_t8(poly) \
static inline uint_fast64_t crc61_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_##poly##_tbl[((crc >> (61 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc61_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffffff; \
} \
\
static uint_fast64_t crc61_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc61_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffffff; \
} \

#define make_crc_kernel_r61_t8(poly) \
static inline uint_fast64_t crc61_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc61_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc61_byte_##poly##_impl(crc, data_byte) & 0x1fffffffffffffff; \
} \
\
static uint_fast64_t crc61_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc61_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x1fffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-62 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f62_t4(poly) \
static inline uint_fast64_t crc62_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc62_##poly##_tbl[((crc >> (62 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc62_##poly##_tbl[((crc >> (62 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc62_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffffff; \
} \
\
static uint_fast64_t crc62_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc62_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffffff; \
} \

#define make_crc_kernel_r62_t4(poly) \
static inline uint_fast64_t crc62_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc62_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc62_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc62_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffffff; \
} \
\
static uint_fast64_t crc62_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc62_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffffff; \
} \

#define make_crc_kernel_f62_t8(poly) \
static inline uint_fast64_t crc62_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_##poly##_tbl[((crc >> (62 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc62_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffffff; \
} \
\
static uint_fast64_t crc62_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc62_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffffff; \
} \

#define make_crc_kernel_r62_t8(poly) \
static inline uint_fast64_t crc62_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc62_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc62_byte_##poly##_impl(crc, data_byte) & 0x3fffffffffffffff; \
} \
\
static uint_fast64_t crc62_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc62_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x3fffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-63 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f63_t4(poly) \
static inline uint_fast64_t crc63_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc63_##poly##_tbl[((crc >> (63 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc63_##poly##_tbl[((crc >> (63 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc63_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffffff; \
} \
\
static uint_fast64_t crc63_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc63_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffffff; \
} \

#define make_crc_kernel_r63_t4(poly) \
static inline uint_fast64_t crc63_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc63_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc63_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc63_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffffff; \
} \
\
static uint_fast64_t crc63_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc63_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffffff; \
} \

#define make_crc_kernel_f63_t8(poly) \
static inline uint_fast64_t crc63_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_##poly##_tbl[((crc >> (63 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc63_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffffff; \
} \
\
static uint_fast64_t crc63_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc63_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffffff; \
} \

#define make_crc_kernel_r63_t8(poly) \
static inline uint_fast64_t crc63_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc63_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc63_byte_##poly##_impl(crc, data_byte) & 0x7fffffffffffffff; \
} \
\
static uint_fast64_t crc63_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc63_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0x7fffffffffffffff; \
} \

///////////////////////////////////////////////////////////////////////////////
//
// CRC-64 Kernels
//
///////////////////////////////////////////////////////////////////////////////

#define make_crc_kernel_f64_t4(poly) \
static inline uint_fast64_t crc64_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc64_##poly##_tbl[((crc >> (64 - 4)) ^ (data_byte >> 4)) & 0x0f] ^ (crc << 4); \
  crc = crc64_##poly##_tbl[((crc >> (64 - 4)) ^ data_byte) & 0x0f] ^ (crc << 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc64_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffffff; \
} \
\
static uint_fast64_t crc64_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc64_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffffff; \
} \

#define make_crc_kernel_r64_t4(poly) \
static inline uint_fast64_t crc64_byte_##poly##_impl(uint_fast64_t crc, uint8_t const data_byte) \
{ \
  crc = crc64_##poly##_tbl[(crc ^ data_byte) & 0x0f] ^ (crc >> 4); \
  crc = crc64_##poly##_tbl[(crc ^ (data_byte >> 4)) & 0x0f] ^ (crc >> 4); \
  return crc; \
 \
} \
\
static inline uint_fast64_t crc64_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffffff; \
} \
\
static uint_fast64_t crc64_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc64_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffffff; \
} \

#define make_crc_kernel_f64_t8(poly) \
static inline uint_fast64_t crc64_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_##poly##_tbl[((crc >> (64 - 8)) ^ data_byte) & 0xff] ^ (crc << 8); \
} \
\
static inline uint_fast64_t crc64_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffffff; \
} \
\
static uint_fast64_t crc64_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc64_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffffff; \
} \

#define make_crc_kernel_r64_t8(poly) \
static inline uint_fast64_t crc64_byte_##poly##_impl(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_##poly##_tbl[(crc ^ data_byte) & 0xff] ^ (crc >> 8); \
} \
\
static inline uint_fast64_t crc64_byte_##poly(uint_fast64_t const crc, uint8_t const data_byte) \
{ \
  return crc64_byte_##poly##_impl(crc, data_byte) & 0xffffffffffffffff; \
} \
\
static uint_fast64_t crc64_##poly(uint_fast64_t const init, uint8_t const * data, size_t data_len) \
{ \
  uint_fast64_t crc = init; \
\
  for (size_t i = 0 ; i < data_len ; ++i) { \
    crc = crc64_byte_##poly##_impl(crc, data[i]); \
  } \
\
  return crc & 0xffffffffffffffff; \
} \


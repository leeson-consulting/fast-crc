#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// Reverse Polynomial Lookup Tables
//
// crc16_Rx8bb7_Profile =
// {
//   "id" : {
//     "polynomial" : "x^16 + x^15 + x^11 + x^9 + x^8 + x^7 + x^5 + x^4 + x^2 + x^1 + 1",
//     "degree"     : 16,
//     "explicit"   : "0x18bb7",
//     "koopman"    : "0xc5db",
//     "normal"     : "0x8bb7"
//   },
//   "hd" :     [null, null, null,
//     /* 3 */ { "bits"    : 65519, "bytes"   : 8189 },
//     /* 4 */ { "bits"    : 353, "bytes"   : 44 },
//     /* 5 */ { "bits"    : 47, "bytes"   : 5 },
//     /* 6 */ { "bits"    : 23, "bytes"   : 2 },
//     /* 7 */ { "bits"    : 8, "bytes"   : 1 },
//     /* 8 */ { "bits"    : 2, "bytes"   : 0 },
//     /* 9 */ { "bits"    : 2, "bytes"   : 0 },
//     /* 10 */ { "bits"    : 2, "bytes"   : 0 },
//     /* 11 */ { "bits"    : 1, "bytes"   : 0 }
//   ],
// }
//
///////////////////////////////////////////////////////////////////////////////

#include "crc_kernels/crc_tables.h"

#if defined(USE_CRC_KERNEL_TABLE8)

static uint16_t const crc16_Rx8bb7_tbl[256] =
{
    0x0000, 0x8d5c, 0xc11b, 0x4c47, 0x5995, 0xd4c9, 0x988e, 0x15d2,
    0xb32a, 0x3e76, 0x7231, 0xff6d, 0xeabf, 0x67e3, 0x2ba4, 0xa6f8,
    0xbdf7, 0x30ab, 0x7cec, 0xf1b0, 0xe462, 0x693e, 0x2579, 0xa825,
    0x0edd, 0x8381, 0xcfc6, 0x429a, 0x5748, 0xda14, 0x9653, 0x1b0f,
    0xa04d, 0x2d11, 0x6156, 0xec0a, 0xf9d8, 0x7484, 0x38c3, 0xb59f,
    0x1367, 0x9e3b, 0xd27c, 0x5f20, 0x4af2, 0xc7ae, 0x8be9, 0x06b5,
    0x1dba, 0x90e6, 0xdca1, 0x51fd, 0x442f, 0xc973, 0x8534, 0x0868,
    0xae90, 0x23cc, 0x6f8b, 0xe2d7, 0xf705, 0x7a59, 0x361e, 0xbb42,
    0x9b39, 0x1665, 0x5a22, 0xd77e, 0xc2ac, 0x4ff0, 0x03b7, 0x8eeb,
    0x2813, 0xa54f, 0xe908, 0x6454, 0x7186, 0xfcda, 0xb09d, 0x3dc1,
    0x26ce, 0xab92, 0xe7d5, 0x6a89, 0x7f5b, 0xf207, 0xbe40, 0x331c,
    0x95e4, 0x18b8, 0x54ff, 0xd9a3, 0xcc71, 0x412d, 0x0d6a, 0x8036,
    0x3b74, 0xb628, 0xfa6f, 0x7733, 0x62e1, 0xefbd, 0xa3fa, 0x2ea6,
    0x885e, 0x0502, 0x4945, 0xc419, 0xd1cb, 0x5c97, 0x10d0, 0x9d8c,
    0x8683, 0x0bdf, 0x4798, 0xcac4, 0xdf16, 0x524a, 0x1e0d, 0x9351,
    0x35a9, 0xb8f5, 0xf4b2, 0x79ee, 0x6c3c, 0xe160, 0xad27, 0x207b,
    0xedd1, 0x608d, 0x2cca, 0xa196, 0xb444, 0x3918, 0x755f, 0xf803,
    0x5efb, 0xd3a7, 0x9fe0, 0x12bc, 0x076e, 0x8a32, 0xc675, 0x4b29,
    0x5026, 0xdd7a, 0x913d, 0x1c61, 0x09b3, 0x84ef, 0xc8a8, 0x45f4,
    0xe30c, 0x6e50, 0x2217, 0xaf4b, 0xba99, 0x37c5, 0x7b82, 0xf6de,
    0x4d9c, 0xc0c0, 0x8c87, 0x01db, 0x1409, 0x9955, 0xd512, 0x584e,
    0xfeb6, 0x73ea, 0x3fad, 0xb2f1, 0xa723, 0x2a7f, 0x6638, 0xeb64,
    0xf06b, 0x7d37, 0x3170, 0xbc2c, 0xa9fe, 0x24a2, 0x68e5, 0xe5b9,
    0x4341, 0xce1d, 0x825a, 0x0f06, 0x1ad4, 0x9788, 0xdbcf, 0x5693,
    0x76e8, 0xfbb4, 0xb7f3, 0x3aaf, 0x2f7d, 0xa221, 0xee66, 0x633a,
    0xc5c2, 0x489e, 0x04d9, 0x8985, 0x9c57, 0x110b, 0x5d4c, 0xd010,
    0xcb1f, 0x4643, 0x0a04, 0x8758, 0x928a, 0x1fd6, 0x5391, 0xdecd,
    0x7835, 0xf569, 0xb92e, 0x3472, 0x21a0, 0xacfc, 0xe0bb, 0x6de7,
    0xd6a5, 0x5bf9, 0x17be, 0x9ae2, 0x8f30, 0x026c, 0x4e2b, 0xc377,
    0x658f, 0xe8d3, 0xa494, 0x29c8, 0x3c1a, 0xb146, 0xfd01, 0x705d,
    0x6b52, 0xe60e, 0xaa49, 0x2715, 0x32c7, 0xbf9b, 0xf3dc, 0x7e80,
    0xd878, 0x5524, 0x1963, 0x943f, 0x81ed, 0x0cb1, 0x40f6, 0xcdaa
};

make_crc_kernel_r16_t8(Rx8bb7)

#else

static uint16_t const crc16_Rx8bb7_tbl[16] =
{
    0x0000, 0xbdf7, 0xa04d, 0x1dba, 0x9b39, 0x26ce, 0x3b74, 0x8683,
    0xedd1, 0x5026, 0x4d9c, 0xf06b, 0x76e8, 0xcb1f, 0xd6a5, 0x6b52
};

make_crc_kernel_r16_t4(Rx8bb7)

#endif

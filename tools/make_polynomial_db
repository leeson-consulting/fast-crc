#!/usr/bin/env bash

set -e

###############################################################################

function find_tmp_dir()
{
  local tmpdir

  for tmpdir in "$TMPDIR" "$TMP" /var/tmp /tmp "$PWD" ; do
    test -d "$tmpdir" && break
  done

  echo "$tmpdir"
}

###############################################################################

function collect_polynomial_profiles()
{
  # 1. Setup polynomial_root

  local polynomial_root="${1}"
  local raw_profiles="${polynomial_root}/raw_profiles"

  mkdir -p "${raw_profiles}"

  local copyright_holder='Philip Koopman'

  mapfile -d '' cc4_attribution << EOF
The material in this folder is Copyright (c) $(date +%Y) ${copyright_holder}

It is reproduced here under the CC 4.0 International Attribution License:

http://creativecommons.org/licenses/by/4.0/

EOF

  echo "${cc4_attribution}" > "${polynomial_root}/License.txt"

  # 2. Collect profile data
  #

  for (( i=3 ; i<=64 ; i++ )) ; do
    printf -v width "%02d" "$i"

    local -a profile_list=( $(curl --silent "https://users.ece.cmu.edu/~koopman/crc/c${width}"/ \
           | grep -o 'href=".*">' \
           | grep '_len.txt' \
           | sed 's/href="//;s/".*$//') )

    for profile in "${profile_list[@]}" ; do
      curl --silent "https://users.ece.cmu.edu/~koopman/crc/c${width}/${profile}" -o "${raw_profiles}/crc${width}_${profile}"
    done
  done
}

###############################################################################

function convert_hamming_lengths_to_json()
{
  local lengths_txt="${1}"
  lengths_txt="${lengths_txt#*\{}"
  lengths_txt="${lengths_txt%\}*}"

  local -a lengths_data=( $(echo "${lengths_txt/,/ }") )
  local -i max_hd=$(( ${#lengths_data[@]} + 2 ))

  local -a json=('[')

  for (( i=0 ; i<=${max_hd} ; i++ )) ; do
    if (( i < 3 )) ; then
      hd_line="null"
    else
      hd_line="${lengths_data[ $(( i - 3 )) ]}"
    fi

    if (( i < ${max_hd} )) ; then
      hd_line="${hd_line}, "
    fi

    json+=("$hd_line")
  done

  json+=(']')

  printf "%s" "${json[@]}"
}

###############################################################################

function make_polynomial_db()
{
  local polynomial_root="${1}"
  local profiles="${polynomial_root}/profiles"
  local all_polynomials="${polynomial_root}/all_polynomials.js"

  echo "polynomials = [" > "${all_polynomials}"

  mkdir -p "${profiles}"

  # 1. Convert raw polynomial profile data to JSON

  while read -r profile_txt ; do
    local profile_path="${profile_txt%/*}"
    local profile_txt_file="${profile_txt##*/}"
    local identity="${profile_txt_file%_len.txt}"
    local identity_crc="${identity%_*}"
    local identity_koopman="${identity#*_}"
    local profile_json_file="${identity}_profile.json"

    echo "Converting \"${profile_txt_file}\" to \"${profile_json_file}\""

    local -a profile_data
    mapfile -t profile_data < "${profile_txt}"
    local hamming_lengths="${profile_data[-1]}"
    local hamming_lengths_json=$(convert_hamming_lengths_to_json "$hamming_lengths")

    mapfile -d '' profile_json_data << EOF
{
  "identity" : $(${SCRIPT_PATH}/convert_poly k2j ${identity_koopman} | sed -e '$ { /^$/ d}' -e '1 ! s/\(^.*\)/  \1/'),
  "profile" : {
    "record" : "$(echo -n ${profile_data[@]})",
    "HD"     : ${hamming_lengths_json}
  }
}
EOF

    echo -n "${profile_json_data}" > "${profiles}/${identity}_profile.json"
    echo -n "${profile_json_data}," >> "${all_polynomials}"

  done < <(find "$polynomial_root/raw_profiles" -type f -iname \*_len.txt)

  echo "];" >> "${all_polynomials}"

  # 2. Make a primitive JS polynomial database

  mapfile -d '' polynomial_db << EOF

var polynomials = $(cat ${all_polynomials});

///////////////////////////////////////////////////////////////////////////////
//
// Database Constructor
//

function Create_PolynomialDatabase(polynomials)
{
  var db = {};

  db.degree = (function extract_polys_by_degree() {
    var degree = []

    for (i = 0 ; i <= 64 ; i++) {
      degree[i] = null;
    }

    for (poly of polynomials) {
      if (degree[poly.identity.degree] === null) {
        degree[poly.identity.degree] = [ poly ];
      } else {
        degree[poly.identity.degree].push(poly);
      }
    }

    return degree;
  })();

  db.HD = (function extract_polys_by_hd() {
    var HD = []

    for (i = 0 ; i <= 32 ; i++) {
      HD[i] = null;
    }

    for (poly of polynomials) {

      for (i = 3 ; i < poly.profile.HD.length ; i++) {
        if (HD[i] === null) {
          HD[i] = [ poly ];
        } else {
          HD[i].push(poly);
        }
      }

    }

    return HD;
  })();

  db.find = function(constraints) {

    if (constraints === null || constraints === undefined || constraints.HD === undefined) {
      constraints = {'HD' : 3, 'len_bytes' : 0, 'degree' : 64}
    }

    if (constraints.len_bytes === undefined) {
      constraints.len_bytes = 0
    }

    if (constraints.degree === undefined) {
      constraints.degree = 64
    }

    var candidates_min_hd = db['HD'][constraints.HD];

    if (candidates_min_hd === undefined || candidates_min_hd === null || candidates_min_hd.length === 0) {
      return null;
    }

    var candidates_min_len_bytes = [];

    for (candidate of candidates_min_hd) {

      if (candidate.profile.HD[constraints.HD] / 8 < constraints.len_bytes) {
        continue;
      }

      candidates_min_len_bytes.push(candidate);

    }

    if (candidates_min_len_bytes.length === 0) {
      return null;
    }

    var candidates_final = [];

    var degree_ok;

    if (Array.isArray(constraints.degree)) {
      degree_ok = function(candidate) {
        return constraints.degree.indexOf(candidate.identity.degree) !== -1;
      };
    } else {
      degree_ok = function(candidate) {
        return candidate.identity.degree <= constraints.degree;
      };
    }

    for (candidate of candidates_min_len_bytes) {

      if (!degree_ok(candidate)) {
        continue;
      }

      candidates_final.push(candidate);

    }

    if (candidates_final.length === 0) {
      return null;
    }

    candidates_final.sort(function predicate(a, b){
      if (a.identity.degree != b.identity.degree) {
        return a.identity.degree - b.identity.degree
      }

      return b.profile.HD[constraints.HD] - a.profile.HD[constraints.HD];
    });

    return candidates_final;
  }

  return db;
}

var poly_db = Create_PolynomialDatabase(polynomials);

console.log("Try these queries to get you started:\n");
console.log("");
console.log("poly_db.find({'HD' : 6});");
console.log("poly_db.find({'HD' : 6, 'len_bytes' : 1000});");
console.log("poly_db.find({'HD' : 6, 'len_bytes' : 13, 'degree' : 16});");
console.log("poly_db.find({'HD' : 4, 'len_bytes' : 200, 'degree' : 12});");

EOF

  echo -n "${polynomial_db}" > "${polynomial_root}/polynomial_db.js"
}

###############################################################################

function main()
{
  local SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]%/*}")
  local SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
  local REPO_ROOT="$(git rev-parse --show-toplevel)"

  # 1. Setup polynomial_root

  local polynomial_root="${1:-${REPO_ROOT}/db/polynomial}"
  local collect_profile_data='No'

  if [[ "${2}" == '-cpd' || "${2}" == '--collect-profile-data' ]] ; then
    collect_profile_data='Yes'
  fi

  # 2. Collect profile data if requested

  if [[ ! -d "$polynomial_root" ]] ; then
    mkdir -p "$polynomial_root"
    collect_profile_data='Yes'
  fi

  if [[ "$collect_profile_data" == 'Yes' ]] ; then
    collect_polynomial_profiles "$polynomial_root"
  fi

  # 3. Convert profile txt data current JSON schema
  #    and concantenate the results to form a primitive JS database.

  make_polynomial_db "$polynomial_root"
}

###############################################################################

main "$@"


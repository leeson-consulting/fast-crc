#!/usr/bin/env bash

set -e

###############################################################################

function find_tmp_dir()
{
  local tmpdir

  for tmpdir in "$TMPDIR" "$TMP" /tmp /var/tmp "$PWD" ; do
    test -d "$tmpdir" && break
  done

  echo "$tmpdir"
}

###############################################################################

function determine_crc_t()
{
  local -i bytes_required=$(( ((poly_degree + 7) / 8) ))

  case $bytes_required in
    1)          echo 'uint8_t'  ;;
    2)          echo 'uint16_t' ;;
    3|4)        echo 'uint32_t' ;;
    5|6|7|8)    echo 'uint64_t' ;;
    *)          echo 'Required CRC exceeds width of max integer!' >&2 ; exit 1 ;;
  esac
}

###############################################################################

function make_tables()
{
  local poly_degree="$1"
  local poly_normal="${2#0x}"
  local crc_t="${3:-$(determine_crc_t "$poly_degree")}"
  local poly_koopman="$(convert_poly n2k $poly_normal $poly_degree)"

  # 1. See if there's a profile in the polynomial database

  local poly_profile="${REPO_ROOT}/db/polynomial/profiles/crc${poly_degree}_Kx${poly_koopman#0x}_profile.json5"
  local poly_info

  if [[ -r "$poly_profile" ]] ; then
    poly_info=$(< "$poly_profile")
  else
    poly_info=$(convert_poly k2j "$poly_koopman")
  fi

  printf "Generating tables for Polynomial(${poly_degree}, Nx${poly_normal})\n"

  local poly_tables

  mapfile -d '' poly_tables << EOF
#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// crc${poly_degree}_Nx${poly_normal}_Profile =
$(printf "${poly_info}" | sed -e 's:\(^.*\):// \1:')
//
///////////////////////////////////////////////////////////////////////////////

#include "crc_kernels/crc_kernel_tables.h"

///////////////////////////////////////////////////////////////////////////////
//
// Forward Polynomial Lookup Tables
//
///////////////////////////////////////////////////////////////////////////////

#if defined(CRC${poly_degree}_Fx${poly_normal}_REQUIRED) && !defined(CRC${poly_degree}_Fx${poly_normal}_INITIALISED)

#if defined(USE_CRC_KERNEL_TABLE8)

static ${crc_t} const Fx${poly_normal}[256] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=False --reflect-out=False --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=8);

make_crc_kernel_f${poly_degree}_t8(Fx${poly_normal})

#else

static ${crc_t} const Fx${poly_normal}[16] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=False --reflect-out=False --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=4);

make_crc_kernel_f${poly_degree}_t4(Fx${poly_normal})

#endif

#define CRC${poly_degree}_Fx${poly_normal}_INITIALISED

#endif

///////////////////////////////////////////////////////////////////////////////
//
// Reverse Polynomial Lookup Tables
//
///////////////////////////////////////////////////////////////////////////////

#if defined(CRC${poly_degree}_Rx${poly_normal}_REQUIRED) && !defined(CRC${poly_degree}_Rx${poly_normal}_INITIALISED)

#if defined(USE_CRC_KERNEL_TABLE8)

static ${crc_t} const Rx${poly_normal}[256] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=True --reflect-out=True --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=8);

make_crc_kernel_r${poly_degree}_t8(Rx${poly_normal})

#else

static ${crc_t} const Rx${poly_normal}[16] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=True --reflect-out=True --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=4);

make_crc_kernel_r${poly_degree}_t4(Rx${poly_normal})

#endif

#define CRC${poly_degree}_Rx${poly_normal}_INITIALISED

#endif
EOF

echo -n "$poly_tables" > "${POLYNOMIAL_EXPORT_PATH}/crc${poly_degree}_Nx${poly_normal}.h"

}

###############################################################################

function make_catalogued_polynomials()
{
  # CRC-8 Polynomials

  make_tables 8 0x07
  make_tables 8 0x31
  make_tables 8 0x1d
  make_tables 8 0x49
  make_tables 8 0x2f
  make_tables 8 0x39
  make_tables 8 0xd5
  make_tables 8 0x9b
  make_tables 8 0xa7

  # CRC-16 Polynomials

  make_tables 16 0x233
  make_tables 16 0x0589
  make_tables 16 0x080b
  make_tables 16 0x1021
  make_tables 16 0x1dcf
  make_tables 16 0x3d65
  make_tables 16 0x8005
  make_tables 16 0x5935
  make_tables 16 0x6f63
  make_tables 16 0x755b
  make_tables 16 0x8bb7
  make_tables 16 0xa097
  make_tables 16 0xc867
  make_tables 16 0x8bb7
  make_tables 16 0x0589
  make_tables 16 0x5935
  make_tables 16 0x755b
  make_tables 16 0x1dcf

  # CRC-24 Polynomials

  make_tables 24 0x00065b
  make_tables 24 0x328b63
  make_tables 24 0x5d6dcb
  make_tables 24 0x800063
  make_tables 24 0x864cfb

  # CRC-32 Polynomials

  make_tables 32 0x000000af
  make_tables 32 0x04c11db7
  make_tables 32 0x1edc6f41
  make_tables 32 0x741b8cd7
  make_tables 32 0x8001801b
  make_tables 32 0x814141ab
  make_tables 32 0xf4acfb13
  make_tables 32 0xa833982b

  # CRC-64 Polynomials

  make_tables 64 0x000000000000001b
  make_tables 64 0x259c84cba6426349
  make_tables 64 0xad93d23594c935a9
  make_tables 64 0x42f0e1eba9ea3693
}

###############################################################################

function setup_pycrc()
{
  PYCRC="${SCRIPT_PATH}/pycrc"

  if [[ -x "${PYCRC}" ]] then
    return;
  fi

  echo "Installing pycrc from tarball..."

  local pycrc_tarball=$(find "$SCRIPT_PATH" -iname pycrc*.tar*)

  if [[ ! -r "${pycrc_tarball}" ]] then
    echo "pycrc tarball missing.  Download the latest release from https://pycrc.org/"
    exit 1
  fi

  local pycrc_install_path="${pycrc_tarball%%.tar*}"

  tar xaf "$pycrc_tarball" -C "$SCRIPT_PATH"

  local pycrc=$(find "${pycrc_install_path}" -type f -executable -iname pycrc\*)

  if [[ ! -r "${pycrc}" ]] then
    echo "pycrc executable appears to be missing from tarball!  Have a look in \"${pycrc_install_path}\" to see what's going on."
    exit 2
  fi

cat <<-EOF > "$PYCRC"

#!/usr/bin/env bash

# Some versions of pycrc run very slowly.
# The cause is unknown.
#
# Older versions of pycrc seem to require Python 2.7,
# but are much faster...
#
# This is a wee hack to make sure table generation completes in a timely manner
#

exec python2 "$pycrc" "\$@"

EOF

  chmod u+x "$PYCRC"

  cd - &> /dev/null

  echo "pycrc installed to \"${pycrc_install_path}\""
}

###############################################################################

function main()
{
  local SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]%/*}")
  local SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
  local REPO_ROOT="$(git rev-parse --show-toplevel)"

  CALLERS_WD="$PWD"

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
    SCRIPT_TMPDIR="$(find_tmp_dir)/${SCRIPT_NAME}"
  else
    SCRIPT_TMPDIR="$(find_tmp_dir)/bash_pid_$$"
  fi

  trap "clean_up ;" EXIT

  source "${SCRIPT_PATH}/convert_poly"

  POLYNOMIAL_EXPORT_PATH="${1:-${CALLERS_WD}/crc_tables}"

  mkdir -p "$POLYNOMIAL_EXPORT_PATH"

  cd "$POLYNOMIAL_EXPORT_PATH" ; POLYNOMIAL_EXPORT_PATH="$PWD" ; cd - > /dev/null

  setup_pycrc

  make_catalogued_polynomials
}

###############################################################################

function clean_up()
{
  rm -rf "$SCRIPT_TMPDIR"
  cd "$CALLERS_WD" &> /dev/null;
}

###############################################################################

main "$@"


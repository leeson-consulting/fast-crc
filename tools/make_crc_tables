#!/usr/bin/env bash

set -e

###############################################################################

function find_tmp_dir()
{
  local tmpdir

  for tmpdir in "$TMPDIR" "$TMP" /tmp /var/tmp "$PWD" ; do
    test -d "$tmpdir" && break
  done

  echo "$tmpdir"
}

###############################################################################

function determine_crc_t()
{
  local poly_degree="$1"
  local -i bytes_required=$(( ((poly_degree + 7) / 8) ))

  case $bytes_required in
    1)          echo 'uint8_t'  ;;
    2)          echo 'uint16_t' ;;
    3|4)        echo 'uint32_t' ;;
    5|6|7|8)    echo 'uint64_t' ;;
    *)          echo 'Required CRC exceeds width of max integer!' >&2 ; exit 1 ;;
  esac
}

###############################################################################

function print_poly_info()
{
  # Use the polynomial profile from database if available,
  # otherwise generate human readable poly_info from poly_degree and poly_normal

  local poly_degree="$1"
  local poly_normal="${2#0x}"
  local poly_koopman="$(convert_poly n2k $poly_normal $poly_degree)"
  local poly_profile="${REPO_ROOT}/db/polynomial/profiles/crc${poly_degree}_Kx${poly_koopman#0x}_profile.json5"
  local poly_info

  if [[ -r "$poly_profile" ]] ; then
    poly_info=$(< "$poly_profile")
  else
    poly_info=$(convert_poly k2j "$poly_koopman")
  fi

  printf "$poly_info"
}

###############################################################################

function make_tables()
{
  local poly_degree="$1"
  local poly_normal="${2#0x}"
  local crc_t="${3:-$(determine_crc_t "$poly_degree")}" # optional
  local sub_table="${4}" # optional, used when generating sharded tables
  local poly_info=$(print_poly_info "$poly_degree" "$poly_normal")

  local forward_poly_id
  local forward_poly_tbl
  local forward_kernel_t8
  local forward_kernel_t4

  if [[ -z "$sub_table" ]] ; then
    forward_poly_id="crc${poly_degree}_Fx${poly_normal}"
    forward_poly_tbl="${forward_poly_id}_tbl"
    forward_kernel_t8="make_crc_kernel_f${poly_degree}_t8(Fx${poly_normal})"
    forward_kernel_t4="make_crc_kernel_f${poly_degree}_t4(Fx${poly_normal})"
  else
    forward_poly_id="crc${poly_degree}_Sx${poly_normal}"
    forward_poly_tbl="${forward_poly_id}_tbl"
  fi

  mkdir -p "$POLYNOMIAL_EXPORT_PATH"

  printf "Generating Forward Lookup Table for Polynomial(${poly_degree}, Fx${poly_normal})\n"

  # 2. Make Forward Polynomial Lookup Tables

  local poly_tables

  mapfile -d '' poly_tables << EOF
#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// Forward Polynomial Lookup Tables
//
// ${forward_poly_id}_Profile =
$(printf "${poly_info}" | sed -e 's:\(^.*\):// \1:')
//
///////////////////////////////////////////////////////////////////////////////

#include "crc_kernels/crc_tables.h"

#if defined(USE_CRC_KERNEL_TABLE8)

static ${crc_t} const ${forward_poly_tbl}[256] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=False --reflect-out=False --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=8);

${forward_kernel_t8}

#else

static ${crc_t} const ${forward_poly_tbl}[16] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=False --reflect-out=False --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=4);

${forward_kernel_t4}

#endif
EOF

  echo -n "$poly_tables" > "${POLYNOMIAL_EXPORT_PATH}/${forward_poly_id}.h"

  # 3. Return early if this is a subordinate table, since these can't be reversed

  if [[ ! -z "$sub_table" ]] ; then
    return 0
  fi

  # 4. Make Reverse Polynomial Lookup Tables

  printf "Generating Reverse Lookup Table for Polynomial(${poly_degree}, Fx${poly_normal})\n"

  local reverse_poly_id="crc${poly_degree}_Rx${poly_normal}"
  local reverse_poly_tbl="${reverse_poly_id}_tbl"
  local reverse_kernel_t8="make_crc_kernel_r${poly_degree}_t8(Rx${poly_normal})"
  local reverse_kernel_t4="make_crc_kernel_r${poly_degree}_t4(Rx${poly_normal})"

  poly_tables=''

  mapfile -d '' poly_tables << EOF
#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// Reverse Polynomial Lookup Tables
//
// ${reverse_poly_id}_Profile =
$(printf "${poly_info}" | sed -e 's:\(^.*\):// \1:')
//
///////////////////////////////////////////////////////////////////////////////

#include "crc_kernels/crc_tables.h"

#if defined(USE_CRC_KERNEL_TABLE8)

static ${crc_t} const ${reverse_poly_tbl}[256] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=True --reflect-out=True --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=8);

${reverse_kernel_t8}

#else

static ${crc_t} const ${reverse_poly_tbl}[16] =
$($PYCRC --width=$poly_degree --poly=0x${poly_normal} --reflect-in=True --reflect-out=True --xor-in=0x0000 --xor-out=0x0000 --algorithm=table-driven --generate=table --table-idx-width=4);

${reverse_kernel_t4}

#endif
EOF

  echo -n "$poly_tables" > "${POLYNOMIAL_EXPORT_PATH}/${reverse_poly_id}.h"
}

###############################################################################

function shard_table()
{
  local sub_poly_degree="$1"
  local sub_poly_normal="${2#0x}"
  local sub_poly_id="crc${sub_poly_degree}_Sx${sub_poly_normal}"
  local sub_poly_tbl="${sub_poly_id}_tbl"

  local poly_degree="$3"
  local poly_normal ; printf -v poly_normal "%0$(( ((poly_degree + 7) / 8) * 2))x" "0x${sub_poly_normal}"

  local crc_t=$(determine_crc_t "$poly_degree")
  local poly_info=$(print_poly_info "$poly_degree" "$poly_normal")
  local sharded_poly_id="crc${poly_degree}_Fx${poly_normal}"
  local sharded_poly_tbl="${sharded_poly_id}_tbl"
  local sharded_kernel_t8="make_crc_kernel_f${poly_degree}_t8(Fx${poly_normal})"
  local sharded_kernel_t4="make_crc_kernel_f${poly_degree}_t4(Fx${poly_normal})"

  printf "Generating Sharded Table for Polynomial(${poly_degree}, Fx${poly_normal})\n"

  # 2. Make Forward Polynomial Lookup Tables

  local poly_tables

  mapfile -d '' poly_tables << EOF
#pragma once

///////////////////////////////////////////////////////////////////////////////
//
// Sharded Polynomial Lookup Tables
//
// ${sharded_poly_id}_Profile =
$(printf "${poly_info}" | sed -e 's:\(^.*\):// \1:')
//
///////////////////////////////////////////////////////////////////////////////

#include "crc_kernels/crc_tables.h"

#include "${sub_poly_id}.h"

#if defined(USE_CRC_KERNEL_TABLE8)

#define ${sharded_poly_tbl} (${sub_poly_tbl})

${sharded_kernel_t8}

#else

#define ${sharded_poly_tbl} (${sub_poly_tbl})

${sharded_kernel_t4}

#endif
EOF

  echo -n "$poly_tables" > "${POLYNOMIAL_EXPORT_PATH}/crc${poly_degree}_Fx${poly_normal}.h"
}

###############################################################################

function make_sharded_table()
{
  # 1. Make the Subordinate Table

  local sub_poly_degree="$1"
  local sub_poly_normal="${2#0x}"
  local sub_crc_t=$(determine_crc_t "$sub_poly_degree")

  make_tables "$sub_poly_degree" "$sub_poly_normal" "$sub_crc_t" "make_subordinate_table"

  # 2. Make the Sharded Tables

  shift 2

  for poly_degree in "${@}" ; do
    shard_table "$sub_poly_degree" "$sub_poly_normal" "$poly_degree"
  done
}

###############################################################################

function make_standard_tables()
{
  printf "Making Standard Polynomial Tables...\n\n"

  local POLYNOMIAL_EXPORT_PATH="${POLYNOMIAL_BASE_PATH}/standard"

  # CRC-8 Polynomials

  make_tables 8 0x07
  make_tables 8 0x31
  make_tables 8 0x1d
  make_tables 8 0x49
  make_tables 8 0x2f
  make_tables 8 0x39
  make_tables 8 0xd5
  make_tables 8 0x9b
  make_tables 8 0xa7

  # CRC-12 Polynomials

  make_tables 12 0x80f
  make_tables 12 0xf13
  make_tables 12 0xd31

  # CRC-16 Polynomials

  make_tables 16 0x233
  make_tables 16 0x0589
  make_tables 16 0x080b
  make_tables 16 0x1021
  make_tables 16 0x1dcf
  make_tables 16 0x3d65
  make_tables 16 0x8005
  make_tables 16 0x5935
  make_tables 16 0x6f63
  make_tables 16 0x755b
  make_tables 16 0x8bb7
  make_tables 16 0xa097
  make_tables 16 0xc867
  make_tables 16 0x8bb7
  make_tables 16 0x0589
  make_tables 16 0x5935
  make_tables 16 0x755b
  make_tables 16 0x1dcf

  # CRC-24 Polynomials

  make_tables 24 0x00065b
  make_tables 24 0x328b63
  make_tables 24 0x5d6dcb
  make_tables 24 0x800063
  make_tables 24 0x864cfb

  # CRC-32 Polynomials

  make_tables 32 0x000000af
  make_tables 32 0x04c11db7
  make_tables 32 0x1edc6f41
  make_tables 32 0x741b8cd7
  make_tables 32 0x8001801b
  make_tables 32 0x814141ab
  make_tables 32 0xf4acfb13
  make_tables 32 0xa833982b

  # CRC-64 Polynomials

  make_tables 64 0x000000000000001b
  make_tables 64 0x259c84cba6426349
  make_tables 64 0xad93d23594c935a9
  make_tables 64 0x42f0e1eba9ea3693

  # CRC "Odds and Sods" Polynomials

  make_tables  3 0x3
  make_tables  7 0x45
  make_tables 10 0x175
  make_tables 10 0x3d9
  make_tables 11 0x385
  make_tables 11 0x307
  make_tables 13 0x1cf5
  make_tables 14 0x202d
  make_tables 15 0x4599
  make_tables 15 0x6815
  make_tables 17 0x1685b
  make_tables 21 0x102899
  make_tables 30 0x2030b9c7
  make_tables 31 0x04c11db7
  make_tables 40 0x0004820009

  printf "\n"
}

###############################################################################

function make_sharded_tables()
{
  printf "Making Sharded Polynomial Tables...\n\n"

  local POLYNOMIAL_EXPORT_PATH="${POLYNOMIAL_BASE_PATH}/sharded"

  # Nguyen's HD4 "Fast CRCs"
  #
  # The HD4 "Fast CRCs" can be implemented in sharded lookup tables.
  # This offers a pretty decent space saving,
  # since the whole family can share one uint8_t lookup table.
  #

  make_sharded_table 8 0x07 8 16 24

  make_sharded_table 16 0x002f 64

  printf "\n"
}

###############################################################################

function make_research_tables()
{
  printf "Making Research Polynomial Tables...\n\n"

  local POLYNOMIAL_EXPORT_PATH="${POLYNOMIAL_BASE_PATH}/research"

  # Koopman HD4 CRC-8

  make_tables 8 0x4d

  # Nguyen HD6 "Fast CRCs"

  make_tables 16 0x011b
  make_tables 24 0x018301
  make_tables 32 0x0006c001

  printf "\n"
}

###############################################################################

function setup_pycrc()
{
  PYCRC="${SCRIPT_PATH}/pycrc"

  if [[ -x "${PYCRC}" ]] then
    return;
  fi

  echo "Installing pycrc from tarball..."

  local pycrc_tarball=$(find "$SCRIPT_PATH" -iname pycrc*.tar*)

  if [[ ! -r "${pycrc_tarball}" ]] then
    echo "pycrc tarball missing.  Download the latest release from https://pycrc.org/"
    exit 1
  fi

  local pycrc_install_path="${pycrc_tarball%%.tar*}"

  tar xaf "$pycrc_tarball" -C "$SCRIPT_PATH"

  local pycrc=$(find "${pycrc_install_path}" -type f -executable -iname pycrc\*)

  if [[ ! -r "${pycrc}" ]] then
    echo "pycrc executable appears to be missing from tarball!  Have a look in \"${pycrc_install_path}\" to see what's going on."
    exit 2
  fi

cat <<-EOF > "$PYCRC"

#!/usr/bin/env bash

# Some versions of pycrc run very slowly.
# The cause is unknown.
#
# Older versions of pycrc seem to require Python 2.7,
# but are much faster...
#
# This is a wee hack to make sure table generation completes in a timely manner
#

exec python2 "$pycrc" "\$@"

EOF

  chmod u+x "$PYCRC"

  cd - &> /dev/null

  echo "pycrc installed to \"${pycrc_install_path}\""
}

###############################################################################

function main()
{
  local SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]%/*}")
  local SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
  local REPO_ROOT="$(git rev-parse --show-toplevel)"

  CALLERS_WD="$PWD"

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
    SCRIPT_TMPDIR="$(find_tmp_dir)/${SCRIPT_NAME}"
  else
    SCRIPT_TMPDIR="$(find_tmp_dir)/bash_pid_$$"
  fi

  trap "clean_up ;" EXIT

  source "${SCRIPT_PATH}/convert_poly"

  POLYNOMIAL_BASE_PATH="${1:-${CALLERS_WD}/crc_tables}"

  mkdir -p "$POLYNOMIAL_BASE_PATH"

  cd "$POLYNOMIAL_BASE_PATH" ; POLYNOMIAL_BASE_PATH="$PWD" ; cd - > /dev/null

  setup_pycrc

  make_standard_tables

  make_sharded_tables

  make_research_tables
}

###############################################################################

function clean_up()
{
  rm -rf "$SCRIPT_TMPDIR"
  cd "$CALLERS_WD" &> /dev/null;
}

###############################################################################

main "$@"


/* bc script */

/* ========================================================================= */
/*                                                                           */
/*     IF YOU VALUE YOUR SANITY...                                           */
/*                                                                           */
/*        DO NOT assign ibase and obase using literal values                 */
/*        bc parses the literal in the context of the CURRENT ibase setting! */
/*                                                                           */
/*        INSTEAD assign ibase and obase using pseudo-constants,             */
/*        which are evaluated at the start of the script while ibase == 10   */
/*                                                                           */
/*        ADDITIONALLY use 'auto' to keep variables local to functions       */
/*        The default scope is global -- just like SHELL                     */
/*                                                                           */
/* ========================================================================= */

define ceil(x) {
  auto os,xx;x=-x;os=scale;scale=0
  xx=x/1;if(xx>x).=xx--
  scale=os;return(-xx)
}

ln_2=l(2)

define log_2(x) {
  return l(x) / ln_2
}

define calc_reciprocal_k(int_width, divisor) {
  return int_width + ceil(log_2(divisor))
}

define calc_reciprocal_a(int_width, divisor, k) {
  return ceil((2 ^ k) / divisor) - (2 ^ int_width)
}

define calc_reciprocal_constants(int_width, divisor) {
  auto k, a
  k = calc_reciprocal_k(int_width, divisor)
  a = calc_reciprocal_a(int_width, divisor, k)
  print "  uint", int_width, "_t const k = ", k, ";\n"
  print "  uint", int_width * 2, "_t const a = ", a, ";"
}


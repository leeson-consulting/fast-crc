#!/usr/bin/env bash

set -e

###############################################################################

function find_tmp_dir()
{
  local tmpdir

  for tmpdir in "$TMPDIR" "$TMP" /tmp /var/tmp "$PWD" ; do
    test -d "$tmpdir" && break
  done

  echo "$tmpdir"
}

###############################################################################

function determine_crc_t()
{
  local poly_degree="$1"
  local -i bytes_required=$(( ((poly_degree + 7) / 8) ))
  local sub_category="$2"

  case "$bytes_required" in
    1)          echo "uint${sub_category}8_t"  ;;
    2)          echo "uint${sub_category}16_t" ;;
    3|4)        echo "uint${sub_category}32_t" ;;
    5|6|7|8)    echo "uint${sub_category}64_t" ;;
    *)          echo "Bytes required for CRC (${bytes_required}) exceeds width of max integer!" >&2 ; exit 1 ;;
  esac
}

###############################################################################

function check_exclusions()
{
  local file_name="$1"

  case "$file_name" in
    'crc12_umts.inc')  echo "exclude" ;;
    'crc8_fast4.inc')  echo "exclude" ;;
    'crc16_fast4.inc') echo "exclude" ;;
    'crc16_fast6.inc') echo "exclude" ;;
    'crc24_fast4.inc') echo "exclude" ;;
    'crc24_fast6.inc') echo "exclude" ;;
    'crc32_fast6.inc') echo "exclude" ;;
    'crc64_fast6.inc') echo "exclude" ;;
    *)                 echo "ok" ;;
  esac
}

###############################################################################

function reverse_bits()
{
  # 1. Reverse all the bits about a 64-bit pseudo-unsigned word
  #    NB. the shifts must be performed on a positive number to avoid sign extension

  local -i input=$(( 0x${1#*x} ))
  local -i result
  local -i result_lsb

  if (( input < 0 )) then
    result=$(( input & 0x7fffffffffffffff )) # make positive twos-complement
    result_lsb=$(( 1 )) # manually set after mask rotation
  else
    result=$(( input ))
    result_lsb=$(( 0 )) # automatically set by mask rotation
  fi

  local -i bit_swap_mask_0=$(( 0x5555555555555555 )) #  1-bit pairs, ie. individual bits
  local -i bit_swap_mask_1=$(( 0x3333333333333333 )) #  2-bit pairs
  local -i bit_swap_mask_2=$(( 0x0f0f0f0f0f0f0f0f )) #  4-bit pairs, ie. nibbles
  local -i bit_swap_mask_3=$(( 0x00ff00ff00ff00ff )) #  8-bit pairs, ie. bytes
  local -i bit_swap_mask_4=$(( 0x0000ffff0000ffff )) # 16-bit pairs

  result=$(( (bit_swap_mask_0 & (result >>  1)) | ((result & bit_swap_mask_0) <<  1) ))
  result=$(( (bit_swap_mask_1 & (result >>  2)) | ((result & bit_swap_mask_1) <<  2) ))
  result=$(( (bit_swap_mask_2 & (result >>  4)) | ((result & bit_swap_mask_2) <<  4) ))
  result=$(( (bit_swap_mask_3 & (result >>  8)) | ((result & bit_swap_mask_3) <<  8) ))
  result=$(( (bit_swap_mask_4 & (result >> 16)) | ((result & bit_swap_mask_4) << 16) ))
  result=$(( (result >> 32) | (result << 32) ))

  # 2. Return early for 64 bit reversals, being sure to set the result_lsb as needed

  local -i input_width_bits=$(( ${2:-64} ))

  if (( input_width_bits == 64 )) then
    result=$(( result | result_lsb ))
    printf "0x%016x" "$result"
    return 0
  fi

  # 3. Calculate result_msb, right-shift the result, apply result_msb and result_msb as needed

  local -i result_msb

  if (( result < 0 )) then
    result=$(( result & 0x7fffffffffffffff )) # make positive twos-complement
    result_msb=$(( 1 )) # manually set after right_shift
  else
    result_msb=$(( 0 )) # automatically set after right_shift
  fi

  result=$(( (result_msb << (input_width_bits - 1)) | (result >> (64 - input_width_bits)) | result_lsb ))

  local -i input_width_nibbles=$(( (input_width_bits + 3) / 4 ))

  printf "0x%0${input_width_nibbles}x" $(( result ))
  return 0
}

###############################################################################

function make_crc_algorithms()
{
  # 0. Parse and Validate args

  local catalog_root="$1"
  local crc_catalog="${catalog_root}/allcrcs.txt"

  if [[ ! -r "${crc_catalog}" ]] ; then
    echo "CRC Catalog is unreadable: \"${crc_catalog}\""
    exit 1
  fi

  local export_path="$2"
  mkdir -p "$export_path"

  if [[ ! -d "${export_path}" ]] ; then
    echo "Export Path is invalid: \"${export_path}\""
    exit 2
  fi

  # 1. Read the raw catalog,
  #    which contains one key-value parameterised algorithm per line

  local width
  local poly
  local init
  local refin
  local refout
  local xorout
  local check
  local residue
  local name
  local file_name

  local algorithm_inc

  while read -r width poly init refin refout xorout check residue name ; do
    width="${width##*=}"
    poly="${poly##*=}"
    init="${init##*=}"
    refin="${refin##*=}"
    refout="${refout##*=}"
    xorout="${xorout##*=}"
    check="${check##*=}"
    residue="${residue##*=}"

    name="${name//\"/}"
    name="${name##*=}"
    name="${name##*/}"
    name="${name//-/_}"

    # 2. Encode Polynomial Reflection in the 'F'orward / 'R'everse polynomial prefix,
    #    which is used to distinguish between table types in the generated C source

    local actual_init

    if [[ "${refin,,}" == "false" ]] ; then
      poly="${poly/0x/Fx}"
      actual_init=${init}
    else
      poly="${poly/0x/Rx}"
      actual_init=$(reverse_bits "$init" "$width")
    fi

    # 3. Coerce name into something friendly for file-systems

    file_name="crc${width}_${name,,}.inc"

    # 4. Generate the ".inc" source, which is expanded by C Preprocessor macros at build time

    printf "Generating Algorithm for \"${file_name}\"\n"

    local -i actual_init_value

    mapfile -d '' algorithm_inc << EOF
#if crc_algorithms_inc == INCLUDE_INTERFACE

#include "crc_algorithms/interface.h"

make_crc${width}_interface(
  /* .name     =  */    ${name},
  /* .poly     =  */    ${poly},
  /* .init     =  */    ${init},
  /* .refin    =  */    ${refin},
  /* .refout   =  */    ${refout},
  /* .xorout   =  */    ${xorout},
  /* .check    =  */    ${check},
  /* .residue  =  */    ${residue})

#elif crc_algorithms_inc == INCLUDE_IMPLEMENTATION

#include "crc_tables/standard/crc${width}_${poly}.h"

make_crc${width}_implementation(
  /* .name     =  */    ${name},
  /* .poly     =  */    ${poly},
  /* .init     =  */    ${actual_init},
  /* .xorout   =  */    ${xorout})

#endif
EOF

    if [[ $(check_exclusions "$file_name") == 'exclude' ]] ; then
      printf "  !!!  EXCLUDING \"${file_name}\" -- See \"check_exclusions\" in \"${SCRIPT_NAME}\"  !!!\n"
    else
      echo -n "${algorithm_inc}" > "${export_path}/${file_name}"
    fi

  done < "$crc_catalog"
}

###############################################################################

function make_crc_interface_n()
{
  local -i poly_degree="$1"
  local crc_t="${2:-$(determine_crc_t "$poly_degree")}" # optional
  local crc_interface

  mapfile -d '' crc_interface << EOF

///////////////////////////////////////////////////////////////////////////////

#define make_crc${poly_degree}_interface(crc_name, crc_poly, crc_init, crc_refin, crc_refout, crc_xorout, crc_check, crc_residue) \\
\\
define_crc_parameters(crc_name, /* crc_width = */ ${poly_degree}, crc_poly, crc_init, crc_refin, crc_refout, crc_xorout, crc_check, crc_residue) \\
\\
${crc_t} crc${poly_degree}_##crc_name##_start(uint8_t const *data, size_t const data_len); \\
\\
${crc_t} crc${poly_degree}_##crc_name##_continue(${crc_t} const crc, uint8_t const *data, size_t const data_len); \\
\\
${crc_t} crc${poly_degree}_##crc_name##_finish(${crc_t} const crc, uint8_t const *data, size_t const data_len); \\
\\
${crc_t} crc${poly_degree}_##crc_name(uint8_t const *data, size_t const data_len); \\

#define make_crc${poly_degree}_implementation(crc_name, crc_poly, crc_init, crc_xorout) \\
\\
${crc_t} crc${poly_degree}_##crc_name##_start(uint8_t const *data, size_t const data_len) \\
{ \\
  return crc${poly_degree}_##crc_poly(/* init = */ crc_init, data, data_len); \\
} \\
\\
${crc_t} crc${poly_degree}_##crc_name##_continue(${crc_t} const crc, uint8_t const *data, size_t const data_len) \\
{ \\
  return crc${poly_degree}_##crc_poly(/* init = */ crc, data, data_len); \\
} \\
\\
${crc_t} crc${poly_degree}_##crc_name##_finish(${crc_t} const crc, uint8_t const *data, size_t const data_len) \\
{ \\
  return crc${poly_degree}_##crc_poly(/* init = */ crc, data, data_len) ^ crc_xorout; /* NB. Compiler eliminates xor(0) */ \\
} \\
\\
${crc_t} crc${poly_degree}_##crc_name(uint8_t const *data, size_t const data_len) \\
{ \\
  return crc${poly_degree}_##crc_name##_finish(crc_init, data, data_len); \\
} \\

EOF

  echo "${crc_interface}"
}

###############################################################################

function make_crc_interfaces()
{
  local export_path="$1"
  mkdir -p "$export_path"

  if [[ ! -d "${export_path}" ]] ; then
    echo "Export Path is invalid: \"${export_path}\""
    exit 1
  fi

  local crc_interface="${export_path}/interface.h"

  local crc_interface_notes

  mapfile -d '' crc_interface_notes << EOF
#pragma once

#include "stdint.h"
#include "stdbool.h"

// @CRC_Parameters is used to capture the standardised CRC parameterisation popularised by Ross Williams [1]:
//  - Provided primarily for >> documentation purposes <<
//  - Used by unit tests to extract things like the "check" value
//  - Not suitable for use in production code due to member types, size, layout, etc.
//
// [1] "A Painless Guide to CRC Error Detection Algorithms", Ross Williams

typedef struct CRC_Parameters
{
  char const * const    name;         // eg. "CRC-8/Koopman"
  size_t const          width;        // in bits

  // @poly is a pseudo hex-string describing "F"orward/"R"everse CRC polynomial in explicit notation, but without the leading bit:
  //
  //   eg. "Fx1021"   ==>   Forward_Polynomial(x^16 + x^12 + x^5 + 1)
  //   eg. "Rx1021"   ==>   Reverse_Polynomial(x^16 + x^12 + x^5 + 1)
  //   eg. "Fx80f"    ==>   Forward_Polynomial(x^12 + x^11 + x^3 + x^2 + x + 1)
  //
  // The "F"/"R" component of the polynomial typically interacts with the table-based implementations,
  // where the entire table is encoded "Reversed" for "R"eversed polynomials.
  //
  // This eliminates the need to reverse the input data bits,
  // and (importantly) eliminates one bit shift operation in the implementation.
  //

  char const * const    poly;

  uint64_t const        init;         // used to seed CRC value
  bool const            refin;        // are the data bits reflected when processed
  bool const            refout;       // are the CRC value bits reflected prior to XOR out
  uint64_t const        xorout;       // XORed with (possibly reflected) CRC value prior to return
  uint64_t const        check;        // the result of crc_algorithm("123456789")
  uint64_t const        residue;      // the result of crc_algorithm(codeword) == crc_algorithm(concat(dataword, crc_val))

} crc_parameters_t;

#if defined(UNIT_TESTS)

#define define_crc_parameters(crc_name, crc_width, crc_poly, crc_init, crc_refin, crc_refout, crc_xorout, crc_check, crc_residue) \\
\\
static const crc_parameters_t \\
crc##crc_width##_##crc_name##_params = { \\
  .name     = "CRC-"#crc_width"/"#crc_name, \\
  .width    = crc_width, \\
  .poly     = #crc_poly, \\
  .init     = crc_init, \\
  .refin    = crc_refin, \\
  .refout   = crc_refout, \\
  .xorout   = crc_xorout, \\
  .check    = crc_check, \\
  .residue  = crc_residue \\
}; \\

#else

#define define_crc_parameters(crc_name, crc_width, crc_poly, crc_init, crc_refin, crc_refout, crc_xorout, crc_check, crc_residue)

#endif

///////////////////////////////////////////////////////////////////////////////
//
// CRC Interface Construction Macros
//
EOF

  echo -n "${crc_interface_notes}" > "${crc_interface}"

  # 2. Make the remaining CRC-8 to CRC-64 kernel macros in a loop

  for ((degree = 3 ; degree <= 64 ; degree++ )) ; do

    echo "$(make_crc_interface_n ${degree})" >> "${crc_interface}"

  done

  # 3. Avoid C preprocessor warning about trailing backslash on last line

  echo "" >> "${crc_interface}"
}

###############################################################################

function main()
{
  local SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]%/*}")
  local SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
  local REPO_ROOT="$(git rev-parse --show-toplevel)"

  CALLERS_WD="$PWD"

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
    SCRIPT_TMPDIR="$(find_tmp_dir)/${SCRIPT_NAME}"
  else
    SCRIPT_TMPDIR="$(find_tmp_dir)/bash_pid_$$"
  fi

  trap "clean_up ;" EXIT

  # 1. Setup catalog_root and export_path

  local catalog_root="${1:-${REPO_ROOT}/db/algorithm/raw_catalog}"
  local export_path="${2:-${REPO_ROOT}/crc_algorithms}"

  # 2. Convert allcrcs.txt catalog to Fast-CRC table based algorithms

  make_crc_algorithms "$catalog_root" "${export_path}/standard"

  # 3. Generate algorithm-kernel interfacing types and Macros

  make_crc_interfaces "${export_path}"
}

###############################################################################

function clean_up()
{
  rm -rf "$SCRIPT_TMPDIR"
  cd "$CALLERS_WD" &> /dev/null;
}

###############################################################################

main "$@"


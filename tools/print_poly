#!/usr/bin/env bash

function _print_poly_help()
{
  local tool
  local tool_name

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
    tool=".${SCRIPT_PATH#${REPO_ROOT}}/${SCRIPT_NAME}"
    tool_name="$SCRIPT_NAME"
  else
    tool="print_poly"
    tool_name="$tool"
  fi

  cat << EOF

$tool_name prints CRC polynomials in human readable form.

  Koopman Notation :   $tool_name <koopman_hex>
  Normal Notation  :   $tool_name <normal_hex> <poly_degree>

  eg. print CRC-16/CCITT using various polynomial notations:

${tool} 1021 16
${tool} 0x1021 16
${tool} 8810
${tool} 0x8810

EOF
}

function _normal_poly_notation_to_bin()
{
  local -i normal_notation=$(( "0x${1#0x}" ))
  local -i explicit_notation=$(( (1 << $2) + normal_notation ))
  echo $(echo "obase=2; ibase=10; $(( explicit_notation ))" | bc)
}

function _koopman_poly_notation_to_bin()
{
  local -i koopman_notation=$(( "0x${1#0x}" ))
  local -i explicit_notation=$(( (koopman_notation * 2) + 1 ))
  echo $(echo "obase=2; ibase=10; $(( explicit_notation ))" | bc)
}

# NB. The print_poly function runs in a subshell.
#     This allows exit on error even when the script is sourced.

function print_poly()
(
  # 0. Quick arg check

  if (( $# < 1 )) ; then
    _print_poly_help
    exit 1
  fi

  if [[ "$1" == '-h' || "$1" == '--help' ]] ; then
    _print_poly_help
    exit 0
  fi

  # 1. Convert poly_hex to poly_bin

  local second_arg="${2:-koopman}"

  local poly_bin

  if [[ "$second_arg" == 'koopman' ]] ; then
    poly_bin=$(_koopman_poly_notation_to_bin "$1")
  else
    poly_bin=$(_normal_poly_notation_to_bin "$1" "$2")
  fi

  local -i poly_bits="${#poly_bin}"

  # 3. Walk the poly_bin string.  NB. First character is MSb

  for (( i = 0 ;  i < $poly_bits ; i++ )) ; do
    if (( "${poly_bin:${i}:1}" == 0 )) ; then
      continue;
    fi

    local -i degree=$((poly_bits - 1 - i))

    if (( degree != 0 )) ; then
      printf "x^${degree} + "
    else
      printf "1"
    fi

  done
)

if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
  set -e
  cd "${0%/*}" ; SCRIPT_PATH="$PWD" ; cd - > /dev/null
  SCRIPT_NAME="${0##*/}"
  REPO_ROOT="$(git rev-parse --show-toplevel)"
  print_poly "$@"
  echo
fi

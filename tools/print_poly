#!/usr/bin/env bash

function _print_poly_help()
{
  local script_name="${SCRIPT_NAME}"
  local script="$script_name"

  if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
    script="./${script}"
  fi

  cat << EOF

$script_name prints CRC polynomials in various notations.

The main application is printing human readable notations from hex:

  Koopman Notation :   $script_name <koopman_hex> {||kn|koopman}
  Explicit Notation :  $script_name <explicit_hex> {en|explicit}
  Normal Notation  :   $script_name <normal_hex> <poly_degree>

  eg. print CRC-16/CCITT using various polynomial notations:

${script} 1021 16
${script} 0x1021 16
${script} 11021 explicit
${script} 0x11021 en
${script} 8810
${script} 8810 kn
${script} 8810 koopman
${script} 0x8810
${script} 0x8810 koopman

The seconday application is converting between hex notations:

${script} e2n 11021
${script} explicit_to_normal 0x11021
${script} e2k 0x11021
${script} explicit_to_koopman 11021

${script} k2e 0x8810
${script} koopman_to_explicit 0x8810
${script} k2n 8810
${script} koopman_to_normal 8810

${script} n2e 0x1021 16
${script} normal_to_explicit 1021 16
${script} n2k 1021 16
${script} normal_to_koopman 0x1021 16

EOF
}

###############################################################################

function _koopman_to_bin()
{
  local -i koopman=$(( "0x${1#0x}" ))
  local -i explicit=$(( (koopman * 2) + 1 ))
  echo $(echo "obase=2; ibase=10; $(( explicit ))" | bc)
}

function _explicit_to_bin()
{
  local -i explicit=$(( "0x${1#0x}" ))
  echo $(echo "obase=2; ibase=10; $(( explicit ))" | bc)
}

function _normal_to_bin()
{
  local -i normal=$(( "0x${1#0x}" ))

  if (( $2 < 64 )) ; then
    local -i explicit=$(( (1 << $2) + normal ))
    echo $(echo "obase=2; ibase=10; $(( explicit ))" | bc)
  else
    local -i explicit_high=$(( (1 << ($2 - 32)) + (normal >> 32) ))
    local -i explicit_low=$(( normal & 0xffffffff ))
    echo $(printf "obase=2; ibase=16; 0x%X%X" "$explicit_high" "$explicit_low")
  fi
}

###############################################################################

function _normal_to_target()
{
  local target="$1"
  local normal="${2#0x}" ; normal="${normal^^}"
  local degree="$3"
  local bc_helper_script

  mapfile -d '' bc_helper_script << EOF
ibase=base_16
normal=${normal}

ibase=base_10
degree=${degree}

obase=base_16
normal_to_${target}(normal, degree)
EOF

  echo 0x$(echo "$bc_helper_script" | bc -l "${SCRIPT_PATH}/convert_poly.bc")
}

function _normal_to_explicit()
{
  _normal_to_target "explicit" "$@"
}

function _normal_to_koopman()
{
  _normal_to_target "koopman" "$@"
}

function _normal_from_target()
{
  local target="$1"
  local poly="${2#0x}" ; poly="${poly^^}"
  local bc_helper_script

  mapfile -d '' bc_helper_script << EOF
ibase=base_16

obase=base_16
${target}_to_normal_poly(${poly})

obase=base_10
${target}_to_normal_poly_degree(${poly})
EOF

  echo $(echo "$bc_helper_script" | bc -l "${SCRIPT_PATH}/convert_poly.bc")
}

function _explicit_to_normal()
{
  _normal_from_target "explicit" "$@"
}

function _koopman_to_normal()
{
  _normal_from_target "koopman" "$@"
}

function _explicit_to_koopman()
{
  local explicit="${1#0x}" ; explicit="${explicit^^}"
  echo 0x$(echo "obase=base_16; ibase=base_16; explicit_to_koopman(${explicit})" | bc -l "${SCRIPT_PATH}/convert_poly.bc")
}

function _koopman_to_explicit()
{
  local koopman="${1#0x}" ; koopman="${koopman^^}"
  echo $(echo "obase=base_16; ibase=base_16; koopman_to_explicit(${koopman})" | bc -l "${SCRIPT_PATH}/convert_poly.bc")
}

###############################################################################

# NB. The print_poly function runs in a subshell.
#     This allows exit on error even when the script is sourced.

function print_poly()
(
  # 0. Dynamically scope 'globals' to maintain sourcing context

  local SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]%/*}")
  local SCRIPT_NAME="${BASH_SOURCE[0]##*/}"

  # 1. Quick arg check

  if (( $# < 1 )) ; then
    _print_poly_help
    exit 1
  fi

  case "$1" in
    'k2e' | 'koopman_to_explicit')
      echo $(_koopman_to_explicit "$2")
      exit 0 ;;

    'k2n' | 'koopman_to_normal')
      echo $(_koopman_to_normal "$2")
      exit 0 ;;

    'e2n' | 'explicit_to_normal')
      echo $(_explicit_to_normal "$2")
      exit 0 ;;

    'e2k' | 'explicit_to_koopman')
      echo $(_explicit_to_koopman "$2")
      exit 0 ;;

    'n2e' | 'normal_to_explicit')
      echo $(_normal_to_explicit "$2" "$3")
      exit 0 ;;

    'n2k' | 'normal_to_koopman')
      echo $(_normal_to_koopman "$2" "$3")
      exit 0 ;;

    'h' | '-h' | 'help' | '--help')
      _print_poly_help
      exit 0 ;;
  esac

  # 2. Convert poly_hex to poly_bin

  local second_arg="${2:-koopman}"

  local poly_bin

  case "$second_arg" in
    'kn' | 'koopman')
      poly_bin=$(_koopman_to_bin "$1") ;;
    'en' | 'explicit')
      poly_bin=$(_explicit_to_bin "$1") ;;
    *)
      poly_bin=$(_normal_to_bin "$1" "$2") ;;
  esac

  local -i poly_bits="${#poly_bin}"

  # 3. Walk the poly_bin string.  NB. First character is MSb

  for (( i = 0 ;  i < $poly_bits ; i++ )) ; do
    if (( "${poly_bin:${i}:1}" == 0 )) ; then
      continue;
    fi

    local -i degree=$((poly_bits - 1 - i))

    if (( degree != 0 )) ; then
      printf "x^${degree} + "
    else
      printf "1"
    fi

  done
)

###############################################################################

if [[ "${BASH_SOURCE[0]}" == "${0}" ]] then
  set -e
  print_poly "$@"
  echo
fi
